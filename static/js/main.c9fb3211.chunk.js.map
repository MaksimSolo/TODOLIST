{"version":3,"sources":["reportWebVitals.ts","components/AddItemForm/AddItemForm.tsx","store/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","store/tasks-reducer.ts","components/Task/Task.tsx","components/Todolist/Todolist#10.tsx","components/AppWithRedux/AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTitle","setNewTitle","error","setError","addItem","trim","style","textAlign","TextField","variant","size","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","Icon","onClick","sx","color","green","AddBox","initialState","ChangeTodolistFilter","id","filter","type","EditableSpan","title","changeTitle","console","log","editMode","setEditMode","offMode","autoFocus","onBlur","onDoubleClick","Task","todolistID","taskID","task","useSelector","state","tasks","t","dispatch","useDispatch","changeStatus","useCallback","isDone","changeTaskStatusAC","checked","changeTaskTitle","changeTaskTitleAC","removeTask","removeTaskAC","ListItem","className","divider","disableGutters","display","justifyContent","fontWeight","Checkbox","marginRight","IconButton","Delete","Todolist10","todolist","todolists","tl","tasksJSX","useMemo","tasksForRender","map","addTaskTDL","newTaskTitle","changeTodoTitle","ChangeTodolistTitle","onAllFilter","onActiveFilter","onCompletedFilter","flexDirection","height","Typography","align","ButtonGroup","fullWidth","Button","AppWithRedux","addTodolist","newTodoTitle","v1","todolistForRender","Grid","item","Paper","elevation","padding","width","AppBar","position","Toolbar","edge","Menu","Container","fixed","container","spacing","rootReducers","combineReducers","action","newTodo","newTask","copyTasks","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9fb3211.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Icon, TextField} from \"@mui/material\";\r\nimport {green} from \"@mui/material/colors\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\nexport interface AddItemFormType {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const [newTitle, setNewTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (newTitle.trim()) {\r\n            props.addItem(newTitle.trim());\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTitle(\"\")\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        setError(false);\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                label={'enter item title'}\r\n                helperText={error && 'Error! Typing is expected'}\r\n                value={newTitle}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                error={error}\r\n            />\r\n            <Icon\r\n                onClick={addItem} sx={{color: green[500]}}><AddBox/></Icon>\r\n            {/*<div className='error-message'>{errorMessage}</div>*/}\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {FilterType, TodolistsType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE_TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    id: string\r\n}\r\n\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string,\r\n    filter: FilterType\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType;\r\n\r\n\r\nconst initialState: Array<TodolistsType> = [];\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsType> = initialState, action: ActionType): Array<TodolistsType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodo: TodolistsType = {\r\n                id: action.id,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [...state, newTodo]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolist = (id: string): RemoveTodolistActionType => ({type: 'REMOVE_TODOLIST', id})\r\nexport const AddTodolist = (title: string): AddTodolistActionType => ({type: 'ADD-TODOLIST', title, id: v1()})\r\nexport const ChangeTodolistTitle = (id: string, title: string): ChangeTodolistTitleActionType => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n})\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType): ChangeTodolistFilterActionType => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title,changeTitle}: EditableSpanType) => {\r\n    console.log('EditableSpan')\r\n    const [newTitle, setNewTitle] = useState(title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const changeNewTitle = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n    const onMode = () => setEditMode(true)\r\n    const offMode = () => {\r\n        changeTitle(newTitle)\r\n        setEditMode(false)\r\n    };\r\n    const keyPressedEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField value={newTitle}\r\n                       autoFocus\r\n                       onBlur={offMode}\r\n                       onChange={changeNewTitle}\r\n                       onKeyPress={keyPressedEditMode}\r\n            /> :\r\n            <span onDoubleClick={onMode}>{title}</span>\r\n    )\r\n});\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\ntype removeTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    todolistID: string\r\n    id: string\r\n}\r\ntype addTaskAT = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistID: string\r\n}\r\ntype changeTaskStatusAT = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistID: string\r\n    taskID: string,\r\n    isDone: boolean,\r\n}\r\ntype changeTaskTitleAT = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string,\r\n    title: string,\r\n    todolistID: string\r\n}\r\n\r\nexport type ActionsType =\r\n    removeTaskAT\r\n    | addTaskAT\r\n    | changeTaskStatusAT\r\n    | changeTaskTitleAT\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType;\r\n\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return ({...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.id)})\r\n        case 'ADD-TASK':\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return ({...state, [action.todolistID]: [newTask, ...state[action.todolistID]]})\r\n        case 'CHANGE-TASK-STATUS':\r\n            return ({\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)\r\n            })\r\n        case 'CHANGE-TASK-TITLE':\r\n          \r\n            return ({\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            })\r\n        case \"ADD-TODOLIST\":\r\n            return ({...state, [action.id]: []})\r\n        case \"REMOVE_TODOLIST\":\r\n            const copyTasks = {...state}\r\n            delete copyTasks[action.id]\r\n            return (copyTasks)\r\n        //также с помощью Рест-оператора\r\n        //const {[action.id]:[], ... rest}={...tasks}\r\n        //return rest\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistID: string, id: string,): removeTaskAT => ({type: 'REMOVE-TASK', todolistID, id,})\r\nexport const addTaskAC = (todolistID: string, title: string,): addTaskAT => ({type: 'ADD-TASK', todolistID, title,})\r\nexport const changeTaskStatusAC = (todolistID: string, taskID: string, isDone: boolean,): changeTaskStatusAT => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskID,\r\n    isDone,\r\n    todolistID\r\n})\r\nexport const changeTaskTitleAC = (todolistID: string, taskID: string, title: string,): changeTaskTitleAT => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistID,\r\n    taskID,\r\n    title,\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../../store/tasks-reducer\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {TaskType} from \"../../App\";\r\n\r\nexport type TaskPropsType ={\r\n    todolistID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({todolistID,taskID}: TaskPropsType) => {\r\n    console.log('Task')\r\n    const task = useSelector<AppStateType, TaskType>(state => state.tasks[todolistID].filter(t=>t.id===taskID)[0])\r\n    const dispatch = useDispatch();\r\n\r\n    const getClasses = () => task.isDone ? \"is-done\" : ''\r\n    const itemFontStyles = {fontWeight: 'bold'}\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusAC(todolistID, taskID, e.currentTarget.checked));\r\n    },[dispatch,todolistID, taskID]);\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(changeTaskTitleAC(todolistID, taskID, title))\r\n    },[dispatch,todolistID,taskID,]);\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskAC(todolistID, taskID));\r\n    },[dispatch,todolistID, taskID]);\r\n    return (\r\n        <ListItem key={taskID}\r\n                  className={getClasses()}\r\n                  divider\r\n                  disableGutters\r\n                  style={{display: \"flex\", justifyContent: 'space-between'}}>\r\n\r\n            <div style={itemFontStyles}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onChange={changeStatus}\r\n                    checked={task.isDone}\r\n                    style={{marginRight: '15px'}}\r\n                />\r\n                {task.isDone\r\n                    ? <span>{task.title}</span>\r\n                    : <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>}\r\n            </div>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n\r\n","import React, {useCallback, useMemo} from \"react\";\r\nimport {FilterType, TaskType, TodolistsType} from \"../../App\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, Typography} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Provider, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType, store} from \"../../store/store\";\r\nimport {addTaskAC} from \"../../store/tasks-reducer\";\r\nimport {ChangeTodolistFilter, ChangeTodolistTitle, RemoveTodolist} from \"../../store/todolists-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist10= React.memo((props: PropsType) => {\r\n    console.log('Todolist rendering')\r\n    const dispatch = useDispatch();\r\n    const todolist = useSelector<AppStateType, TodolistsType>(state => state.todolists.filter(tl=>tl.id===props.todolistID)[0])\r\n    const tasks = useSelector<AppStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    const tasksForRender = (filter: FilterType, tasks: Array<TaskType>) => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.isDone)\r\n            case \"active\":\r\n                return tasks.filter(t => !t.isDone)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const tasksJSX = useMemo(()=>tasksForRender(todolist.filter, tasks).map(t => <Task key={t.id} todolistID={props.todolistID} taskID={t.id}/>),[props.todolistID,tasks,todolist.filter]);\r\n    const addTaskTDL = useCallback((newTaskTitle: string) => dispatch(addTaskAC(props.todolistID, newTaskTitle)),[dispatch,props.todolistID]);\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        dispatch(ChangeTodolistTitle(props.todolistID, title));\r\n    }, [dispatch,props.todolistID,]);\r\n\r\n    const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"all\")),[dispatch,props.todolistID]);\r\n    const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"active\")),[dispatch,props.todolistID]);\r\n    const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"completed\")),[dispatch,props.todolistID]);\r\n\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%'}}>\r\n            <Typography\r\n            variant={'h5'}\r\n            align={'center'}\r\n            style={{fontWeight:'bold'}}>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoTitle}/>\r\n                <IconButton onClick={() => dispatch(RemoveTodolist(props.todolistID))}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTaskTDL}/>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={'small'}\r\n                    fullWidth\r\n                >\r\n                    <Button\r\n                        color={todolist.filter === \"all\" ? 'secondary' : \"primary\"}\r\n                        onClick={onAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"active\" ? 'secondary' : \"primary\"}\r\n                        onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"completed\" ? 'secondary' : \"primary\"}\r\n                        onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React, {useCallback, useMemo} from 'react';\nimport '../../App.css';\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {AddTodolist} from \"../../store/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {TodolistsType} from \"../../App\";\nimport {Todolist10} from \"../Todolist/Todolist#10\";\nimport {Menu} from \"@mui/icons-material\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type FilterType = \"all\" | \"active\" | \"completed\";\n\n//C-R-U-D\nfunction AppWithRedux() {\n    console.log(\"App rendering\")\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppStateType, Array<TodolistsType>>(state => state.todolists)\n\n    const addTodolist = useCallback((newTodoTitle: string) => {\n        dispatch(AddTodolist(newTodoTitle))\n    }, [dispatch]);\n\n    const todolistForRender = useMemo(()=>todolists.map(tl => {\n\n        return (\n            <Grid item\n                  key={tl.id}>\n                <Paper elevation={20}\n                       style={{padding: '15px', width: '300px', height: '400px'}}>\n                    < Todolist10\n                        key={tl.id}\n                        todolistID={tl.id}\n                    />\n                </Paper>\n            </Grid>\n        )\n    }),[todolists]);\n    //UI:\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant='h6'>\n                        Todolists\n                    </Typography>\n                    <Button color='inherit' variant={'outlined'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container justifyContent={'center'} style={{padding: '15px'}}>\n                    <Grid item>\n                        <AddItemForm addItem={addTodolist}/>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={5} justifyContent={'center'}>\n                    {todolistForRender}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\nexport default AppWithRedux;\n","import {combineReducers,  legacy_createStore as createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\n\r\ntype ReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducers);\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./components/AppWithRedux/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}