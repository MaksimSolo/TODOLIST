{"version":3,"sources":["api/task-api.ts","reportWebVitals.ts","components/AddItemForm/AddItemForm.tsx","api/todolist-api.ts","store/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","store/tasks-reducer.ts","components/Task/Task.tsx","components/Todolist/Todolist#10.tsx","components/AppWithRedux/AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTitle","setNewTitle","error","setError","addItem","trim","style","textAlign","TextField","variant","size","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","Icon","onClick","sx","color","green","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","initialState","RemoveTodolist","type","AddTodolist","todolist","ChangeTodolistTitle","ChangeTodolistFilter","filter","SetTodolists","todolists","EditableSpan","changeTitle","console","log","editMode","setEditMode","offMode","autoFocus","onBlur","onDoubleClick","tasksAPI","todolistId","model","updateTaskTC","todolistID","taskID","changesForApiModel","dispatch","getState","currentTask","tasks","find","t","apiModel","deadline","description","priority","startDate","status","updateTaskAC","warn","Task","task","useSelector","state","useDispatch","changeStatus","useCallback","checked","Completed","New","changeTaskTitle","removeTask","removeTaskAC","removeTaskTC","ListItem","className","divider","disableGutters","display","justifyContent","flexDirection","fontWeight","Checkbox","marginRight","IconButton","Delete","Todolist10","useEffect","resp","setTasksAC","data","items","tl","tasksJSX","useMemo","tasksForRender","map","addTaskTDL","newTaskTitle","item","changeTodoTitle","a","updateTodolistTitleTC","onAllFilter","onActiveFilter","onCompletedFilter","height","Typography","align","ButtonGroup","fullWidth","Button","AppWithRedux","addTodolist","newTodoTitle","todolistForRender","Grid","Paper","elevation","padding","minWidth","minHeight","AppBar","position","Toolbar","edge","Menu","Container","fixed","container","spacing","rootReducers","combineReducers","action","newTodo","resultTodo","copyState","todoListId","newTasks","copyTasks","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db21f8b4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'e8f5aac1-49b6-4991-ad14-5794e579a911'\r\n    }\r\n}\r\nconst instance = axios.create({baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists', ...settings,})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<GetTaskResponseType>(`${todolistId}/tasks`,);\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<BaseTasksRespType>(`${todolistId}/tasks`, {title});\r\n    },\r\n    deleteTask: (todolistId: string, id: string) => {\r\n        return instance.delete<BaseTasksRespType<{}>>(`${todolistId}/tasks/${id}`);\r\n    },\r\n    updateTask: (todolistId: string, id: string, model: UpdateTaskApiModel) => {\r\n        return instance.put<BaseTasksRespType>(`${todolistId}/tasks/${id}`, model);\r\n    },\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string,\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype GetTaskResponseType = {\r\n    error: string | null\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskApiModel = {\r\n    deadline: string,\r\n    description: string,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    status: TaskStatuses,\r\n    title: string,\r\n}\r\ntype BaseTasksRespType<D = { item: TaskType }> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n    fieldsErrors?: string[]\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Icon, TextField} from \"@mui/material\";\r\nimport {green} from \"@mui/material/colors\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\nexport interface AddItemFormType {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const [newTitle, setNewTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (newTitle.trim()) {\r\n            props.addItem(newTitle.trim());\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTitle(\"\")\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        setError(false);\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                label={'enter item title'}\r\n                helperText={error && 'Error! Typing is expected'}\r\n                value={newTitle}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                error={error}\r\n            />\r\n            <Icon\r\n                onClick={addItem} sx={{color: green[500]}}><AddBox/></Icon>\r\n            {/*<div className='error-message'>{errorMessage}</div>*/}\r\n        </div>\r\n    );\r\n});\r\n\r\n","import axios from \"axios\";\r\n\r\nexport type TodoType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type BaseResponseType<T = {} > = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: T\r\n    fieldsErrors: string[]\r\n}\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'e8f5aac1-49b6-4991-ad14-5794e579a911'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    ...settings,\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolists: () => {\r\n        return instance.get<Array<TodoType>>('');\r\n    },\r\n    createTodolist: (title: string) => {\r\n        return instance.post<BaseResponseType<{ item: TodoType }>>('', {title});\r\n    },\r\n    deleteTodolist: (id: string) => {\r\n        return instance.delete<BaseResponseType>(`${id}`);\r\n    },\r\n    updateTodolistTitle: (title: string, id: string) => {\r\n        return instance.put<BaseResponseType>(`${id}`, {title});\r\n    },\r\n}\r\n\r\n","import {todolistAPI, TodoType} from \"../api/todolist-api\";\r\nimport {AppThunk} from \"./store\";\r\n\r\nconst initialState: Array<TodolistBLLType> = [];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistBLLType> = initialState, action: ActionType): Array<TodolistBLLType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodo = action.todolist;\r\n            const resultTodo: TodolistBLLType = {...newTodo, filter: 'all'}\r\n            return [resultTodo, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action-creators\r\nexport const RemoveTodolist = (id: string) => ({type: 'REMOVE_TODOLIST', id}) as const\r\nexport const AddTodolist = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist,}) as const\r\nexport const ChangeTodolistTitle = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title}) as const\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter}) as const\r\nexport const SetTodolists = (todolists: Array<TodoType>) => ({type: 'SET_TODOLISTS', todolists}) as const;\r\n\r\n//thunk-creators\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(SetTodolists((await todolistAPI.getTodolists()).data))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const removeTodolistTC = (id: string): AppThunk => async dispatch => {\r\n    try {\r\n        await todolistAPI.deleteTodolist(id)\r\n        dispatch(RemoveTodolist(id))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(AddTodolist((await todolistAPI.createTodolist(title)).data.data.item))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const updateTodolistTitleTC = (title: string, id: string): AppThunk => async dispatch => {\r\n    try {\r\n        await todolistAPI.updateTodolistTitle(title, id)\r\n        dispatch(ChangeTodolistTitle(id, title))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistBLLType = TodoType & { filter: FilterType }\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type ActionType =\r\n    ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof ChangeTodolistTitle>\r\n    | ReturnType<typeof ChangeTodolistFilter>\r\n    | ReturnType<typeof SetTodolists>;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title,changeTitle}: EditableSpanType) => {\r\n    console.log('EditableSpan')\r\n    const [newTitle, setNewTitle] = useState(title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const changeNewTitle = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n    const onMode = () => setEditMode(true)\r\n    const offMode = () => {\r\n        changeTitle(newTitle)\r\n        setEditMode(false)\r\n    };\r\n    const keyPressedEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField value={newTitle}\r\n                       autoFocus\r\n                       onBlur={offMode}\r\n                       onChange={changeNewTitle}\r\n                       onKeyPress={keyPressedEditMode}\r\n            /> :\r\n            <span onDoubleClick={onMode}>{title}</span>\r\n    )\r\n});\r\n\r\n\r\n","import {AddTodolist, RemoveTodolist, SetTodolists} from \"./todolists-reducer\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskApiModel} from \"../api/task-api\";\r\nimport {AppStateType, AppThunk} from \"./store\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TASKS':\r\n            return {...state, [action.todolistID]: action.tasks}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.id)}\r\n        case 'ADD-TASK': {\r\n            const copyState = {...state}\r\n            let tasks = {...state}[action.task.todoListId]\r\n            const newTasks = [action.task, ...tasks]\r\n            copyState[action.task.todoListId] = newTasks\r\n            return copyState;\r\n        }\r\n        case \"UPDATE_TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    ...action.changesForApiModel\r\n                } : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE_TODOLIST\":\r\n            const copyTasks = {...state}\r\n            delete copyTasks[action.id]\r\n            return (copyTasks)\r\n        //также с помощью Рест-оператора\r\n        //const {[action.id]:[], ... rest}={...tasks}\r\n        //return rest\r\n        case \"SET_TODOLISTS\":\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action-creators\r\nexport const removeTaskAC = (todolistID: string, id: string,) => ({type: 'REMOVE-TASK', todolistID, id,}) as const\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task,}) as const\r\nexport const updateTaskAC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel) =>\r\n    ({type: 'UPDATE_TASK', taskID, todolistID, changesForApiModel,}) as const\r\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) =>\r\n    ({type: 'SET_TASKS', todolistID, tasks}) as const\r\n\r\n//thunk-creators\r\nexport const fetchTasksTC = (todolistID: string): AppThunk => dispatch => {\r\n    tasksAPI.getTasks(todolistID).then(resp => dispatch(setTasksAC(todolistID, resp.data.items)))\r\n}\r\nexport const removeTaskTC = (todolistID: string, taskID: string,): AppThunk => dispatch => {\r\n    tasksAPI.deleteTask(todolistID, taskID).then(() => dispatch(removeTaskAC(todolistID, taskID)))\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string): AppThunk => dispatch => {\r\n    tasksAPI.createTask(todolistID, title).then(resp => dispatch(addTaskAC(resp.data.data.item)))\r\n}\r\nexport const updateTaskTC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel): AppThunk =>\r\n    (dispatch, getState: () => AppStateType) => {\r\n        const state = getState();\r\n        const allTasksOfTodo = state.tasks[todolistID];\r\n        const currentTask = allTasksOfTodo.find(t => t.id === taskID)\r\n        if (!currentTask) {\r\n            console.warn('Task not found in state!!??')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskApiModel = {\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            status: currentTask.status,\r\n            title: currentTask.title,\r\n            ...changesForApiModel\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistID, taskID, apiModel).then(() => {\r\n            dispatch(updateTaskAC(todolistID, taskID, changesForApiModel))\r\n        })\r\n    }\r\n\r\n//types\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\nexport type ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof setTasksAC>;\r\n\r\nexport type UpdateTaskUIModel = {\r\n    deadline?: string,\r\n    description?: string,\r\n    priority?: TaskPriorities,\r\n    startDate?: string,\r\n    status?: TaskStatuses,\r\n    title?: string,\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {removeTaskTC, updateTaskTC} from \"../../store/tasks-reducer\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {TaskStatuses, TaskType} from \"../../api/task-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    todolistID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({todolistID, taskID}: TaskPropsType) => {\r\n    console.log('Task')\r\n    const task = useSelector<AppStateType, TaskType>(state => state.tasks[todolistID].filter(t => t.id === taskID)[0])\r\n    const dispatch = useDispatch();\r\n\r\n    const getClasses = () => task.status === TaskStatuses.Completed ? \"is-done\" : ''\r\n    const itemFontStyles = {fontWeight: 'bold'}\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(todolistID, taskID, {status}));\r\n    }, [dispatch,todolistID, taskID,]);\r\n    const changeTaskTitle = useCallback(title => {\r\n        dispatch(updateTaskTC(todolistID, taskID, {title}))\r\n    }, [dispatch, todolistID, taskID,]);\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(todolistID, taskID,));\r\n    }, [dispatch, todolistID, taskID]);\r\n    return (\r\n        <ListItem key={taskID}\r\n                  className={getClasses()}\r\n                  divider\r\n                  disableGutters\r\n                  style={{\r\n                      display: 'flex',\r\n                      justifyContent: 'space-between',\r\n                      flexDirection: 'row',\r\n                      textAlign: 'left',\r\n                  }}>\r\n\r\n            <div style={itemFontStyles}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onChange={changeStatus}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    style={{marginRight: '15px'}}\r\n                />\r\n                {task.status === TaskStatuses.Completed\r\n                    ? <span>{task.title}</span>\r\n                    : <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>}\r\n            </div>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect, useMemo} from \"react\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, Typography} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"../../store/tasks-reducer\";\r\nimport {\r\n    ChangeTodolistFilter,\r\n    FilterType,\r\n    removeTodolistTC,\r\n    TodolistBLLType,\r\n    updateTodolistTitleTC\r\n} from \"../../store/todolists-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/task-api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist10 = React.memo((props: PropsType) => {\r\n    console.log('Todolist rendering')\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolistID))\r\n    }, [props.todolistID, dispatch])\r\n\r\n    const todolist = useSelector<AppStateType, TodolistBLLType>(state => state.todolists.filter(tl => tl.id === props.todolistID)[0])\r\n    const tasks = useSelector<AppStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n    const tasksForRender = (filter: FilterType, tasks: Array<TaskType>) => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            case \"active\":\r\n                return tasks.filter(t => t.status !== TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const tasksJSX = useMemo(() => tasksForRender(todolist.filter, tasks).map(t => <Task key={t.id}\r\n                                                                                         todolistID={props.todolistID}\r\n                                                                                         taskID={t.id}/>), [props.todolistID, tasks, todolist.filter]);\r\n    const addTaskTDL = useCallback((newTaskTitle: string) => dispatch(addTaskTC(props.todolistID, newTaskTitle)), [dispatch, props.todolistID]);\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(title, props.todolistID,));\r\n    }, [dispatch, props.todolistID,]);\r\n\r\n    const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"all\")), [dispatch, props.todolistID]);\r\n    const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"active\")), [dispatch, props.todolistID]);\r\n    const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"completed\")), [dispatch, props.todolistID]);\r\n\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%'}}>\r\n            <Typography\r\n                variant={'h5'}\r\n                align={'center'}\r\n                style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoTitle}/>\r\n                <IconButton onClick={() => dispatch(removeTodolistTC(props.todolistID))}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTaskTDL}/>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={'small'}\r\n                    fullWidth\r\n                >\r\n                    <Button\r\n                        color={todolist.filter === \"all\" ? 'secondary' : \"primary\"}\r\n                        onClick={onAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"active\" ? 'secondary' : \"primary\"}\r\n                        onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"completed\" ? 'secondary' : \"primary\"}\r\n                        onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React, {useCallback, useEffect, useMemo} from 'react';\nimport '../../App.css';\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {createTodolistTC, fetchTodolistsTC, TodolistBLLType} from \"../../store/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {Todolist10} from \"../Todolist/Todolist#10\";\nimport {Menu} from \"@mui/icons-material\";\n\n\n//C-R-U-D\nfunction AppWithRedux() {\n    console.log(\"App rendering\")\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchTodolistsTC())\n    }, [dispatch])\n\n\n    const todolists = useSelector<AppStateType, Array<TodolistBLLType>>(state => state.todolists)\n\n    const addTodolist = useCallback((newTodoTitle: string) => {\n        dispatch(createTodolistTC(newTodoTitle))\n    }, [dispatch]);\n\n    const todolistForRender = useMemo(() => todolists.map(tl => {\n\n        return (\n            <Grid item\n                  key={tl.id}>\n                <Paper elevation={20}\n                       style={{padding: '15px', minWidth: '300px', minHeight: '100px'}}>\n                    < Todolist10\n                        key={tl.id}\n                        todolistID={tl.id}\n                    />\n                </Paper>\n            </Grid>\n        )\n    }), [todolists]);\n    //UI:\n    return (\n        <div className=\"App\" >\n            <AppBar position={'static'}>\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant='h6'>\n                        Todolists\n                    </Typography>\n                    <Button color='inherit' variant={'outlined'}>Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container justifyContent={'center'} style={{padding: '15px'}}>\n                    <Grid item>\n                        <AddItemForm addItem={addTodolist}/>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={5} justifyContent={'center'}>\n                    {todolistForRender}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux;\n","import {applyMiddleware, combineReducers, legacy_createStore as createStore} from \"redux\";\r\nimport {ActionType, todolistsReducer} from \"./todolists-reducer\";\r\nimport {ActionsType, tasksReducer} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\ntype ReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\ntype AppActionsType = ActionType | ActionsType;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./components/AppWithRedux/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}