{"version":3,"sources":["common/types/types.ts","reportWebVitals.ts","common/utils/error-utils.ts","app/api/todolist-api.ts","app/store/auth-reducer.ts","app/api/task-api.ts","app/store/app-reducer.ts","app/store/tasks-reducer.ts","app/store/todolists-reducer.ts","app/store/store.ts","app/components/ErrorSnackbar/ErrorSnackbar.tsx","app/components/Login/Login.tsx","app/components/AddItemForm/AddItemForm.tsx","app/components/EditableSpan/EditableSpan.tsx","app/components/Task/Task.tsx","app/components/TodosList/Todolist10/Todolist#10.tsx","app/components/TodosList/TodosList.tsx","app/components/PageNotFound/PageNotFound.tsx","app/AppWithRedux.tsx","index.tsx"],"names":["ResponseResultCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","handleServerNetworkError","dispatch","error","setAppErrorAC","message","setAppStatusAC","handleServerAppError","data","messages","length","settings","withCredentials","headers","instance","axios","create","baseURL","authInstance","todolistAPI","get","title","post","id","delete","put","authAPI","loginParams","TaskStatuses","TaskPriorities","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","tasksAPI","todolistId","model","updateTaskAC","todolistID","taskID","changesForApiModel","changeTaskItemStatus","taskItemStatus","updateTaskTC","getState","a","state","allTasksOfTodo","tasks","currentTask","find","t","console","warn","apiModel","deadline","description","priority","startDate","resp","resultCode","RemoveTodolist","ChangeTodolistTitle","ChangeTodolistFilter","filter","changeTodolistEntityStatusAC","entityStatus","clearStateData","rootReducers","combineReducers","todolists","action","tl","newTodo","todolist","resultTodo","map","copyState","task","todoListId","newBLLTypeTask","copyTasks","forEach","app","login","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","TransitionDown","props","Slide","direction","children","Alert","React","ref","elevation","variant","ErrorSnackbar","useDispatch","open","handleClose","event","reason","Snackbar","autoHideDuration","onClose","TransitionComponent","severity","sx","width","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","OK","resetForm","useEffect","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","AddItemForm","memo","useState","newTitle","setNewTitle","setError","addItem","trim","textAlign","disabled","size","helperText","onChange","e","currentTarget","onKeyUp","key","IconButton","onClick","green","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onMode","offMode","onDoubleClick","autoFocus","onBlur","Task","changeStatus","useCallback","Completed","New","changeTaskTitle","removeTask","removeTaskAC","catch","err","removeTaskTC","ListItem","className","divider","disableGutters","display","flexDirection","fontWeight","marginRight","Delete","Todolist10","tasksJSX","useMemo","tasksForRender","addTaskTDL","newTaskTitle","changeTodoTitle","updateTodolistTitleTC","removeTodolist","onAllFilter","onActiveFilter","onCompletedFilter","height","wordBreak","alignItems","Typography","align","ButtonGroup","TodosList","addTodolist","newTodoTitle","todolistForRender","Paper","padding","minWidth","maxWidth","minHeight","setTasksAC","items","spacing","PageNotFound","AppWithRedux","appStatuses","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","to","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f4bb0b4.chunk.js","sourcesContent":["export type LoginParamsType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha?: string,\r\n}\r\n\r\nexport enum ResponseResultCode {\r\n  OK,\r\n  ERROR = 10\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AppStatusActionType, setAppErrorAC, setAppStatusAC} from \"../../app/store/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BaseResponseType} from \"../../app/api/todolist-api\";\r\nimport {BaseTasksRespType} from \"../../app/api/task-api\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppStatusActionType>, error: AxiosError) => {\r\n  dispatch(setAppErrorAC(error.message ? error.message : 'SOME ERROR OCCURRED'))\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T, D>(dispatch: Dispatch<AppStatusActionType>, data: BaseResponseType<T> | BaseTasksRespType<D>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setAppErrorAC('SOME ERROR OCCURRED'))\r\n  }\r\n  dispatch(setAppStatusAC('failed'))\r\n}","import axios from \"axios\";\r\nimport {LoginParamsType} from \"../../common/types/types\";\r\n\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'api-key': 'b42e249f-81b0-486e-a39f-c56668ce792c'\r\n  }\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n  ...settings,\r\n})\r\nconst authInstance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/auth',\r\n  ...settings,\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n  getTodolists: () => {\r\n    return instance.get<Array<TodoType>>('');\r\n  },\r\n  createTodolist: (title: string) => {\r\n    return instance.post<BaseResponseType<{ item: TodoType }>>('', {title});\r\n  },\r\n  deleteTodolist: (id: string) => {\r\n    return instance.delete<BaseResponseType>(`${id}`);\r\n  },\r\n  updateTodolistTitle: (title: string, id: string) => {\r\n    return instance.put<BaseResponseType>(`${id}`, {title});\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  login: (loginParams: LoginParamsType) => {\r\n    return authInstance.post<BaseResponseType<{ userId: number }>>('login', loginParams);\r\n  },\r\n  me: () => {\r\n    return authInstance.get<BaseResponseType>('me',)\r\n  },\r\n  logout: () => {\r\n    return authInstance.delete<BaseResponseType>('login')\r\n  }\r\n}\r\n\r\n\r\n//types\r\nexport type TodoType = {\r\n  addedDate: string\r\n  id: string\r\n  order: number\r\n  title: string\r\n}\r\nexport type BaseResponseType<T = {}> = {\r\n  resultCode: number\r\n  messages: string[],\r\n  data: T\r\n  fieldsErrors: string[]\r\n}\r\n","import {AppThunk} from \"./store\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/error-utils\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {clearStateData} from \"./todolists-reducer\";\r\nimport {LoginParamsType, ResponseResultCode} from \"../../common/types/types\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: LoggedInActionType): AuthInitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return {\r\n        ...state, isLoggedIn: action.value\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//action-creator\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n//thunk -creator\r\nexport const loginTC = (loginParams: LoginParamsType): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const resp = await authAPI.login(loginParams)\r\n    if (resp.data.resultCode === ResponseResultCode.OK) {\r\n      dispatch(setIsLoggedIn(true))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(dispatch, resp.data)\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const resp = await authAPI.logout()\r\n    if (resp.data.resultCode === ResponseResultCode.OK) {\r\n      dispatch(setIsLoggedIn(false))\r\n      dispatch(clearStateData())\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(dispatch, resp.data)\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\n\r\n\r\n//types\r\nexport type AuthInitialStateType = typeof initialState;\r\nexport type LoggedInActionType = ReturnType<typeof setIsLoggedIn>","import axios from \"axios\";\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'api-key': 'b42e249f-81b0-486e-a39f-c56668ce792c'\r\n  }\r\n}\r\nconst instance = axios.create({baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists', ...settings,})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n  getTasks: (todolistId: string) => {\r\n    return instance.get<GetTaskResponseType>(`${todolistId}/tasks`,);\r\n  },\r\n  createTask: (todolistId: string, title: string) => {\r\n    return instance.post<BaseTasksRespType>(`${todolistId}/tasks`, {title});\r\n  },\r\n  deleteTask: (todolistId: string, id: string) => {\r\n    return instance.delete<BaseTasksRespType<{}>>(`${todolistId}/tasks/${id}`);\r\n  },\r\n  updateTask: (todolistId: string, id: string, model: UpdateTaskApiModel) => {\r\n    return instance.put<BaseTasksRespType>(`${todolistId}/tasks/${id}`, model);\r\n  },\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n  New,\r\n  InProgress,\r\n  Completed,\r\n  Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low,\r\n  Middle,\r\n  Hi,\r\n  Urgently,\r\n  Later\r\n}\r\n\r\nexport type TaskType = {\r\n  addedDate: string,\r\n  deadline: string\r\n  description: string\r\n  id: string\r\n  order: number\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  status: TaskStatuses\r\n  title: string\r\n  todoListId: string\r\n}\r\ntype GetTaskResponseType = {\r\n  error: string | null\r\n  items: TaskType[]\r\n  totalCount: number\r\n}\r\nexport type UpdateTaskApiModel = {\r\n  deadline: string,\r\n  description: string,\r\n  priority: TaskPriorities,\r\n  startDate: string,\r\n  status: TaskStatuses,\r\n  title: string,\r\n}\r\nexport type BaseTasksRespType<D = { item: TaskType }> = {\r\n  resultCode: number\r\n  messages: string[]\r\n  data: D\r\n  fieldsErrors?: string[]\r\n}\r\n\r\n","import {AppThunk} from \"./store\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/error-utils\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\nimport {ResponseResultCode} from \"../../common/types/types\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: LinearProgressStateType = initialState, action: AppStatusActionType): LinearProgressStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//action-creator\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\n//thunk-creators\r\nexport const initializeApp = (): AppThunk => async dispatch => {\r\n    try {\r\n        const resp = await authAPI.me()\r\n        if (resp.data.resultCode === ResponseResultCode.OK) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error)\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LinearProgressStateType = typeof initialState;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppStatusActionType =\r\n    ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>","import {AddTodolist, clearStateData, RemoveTodolist, SetTodolists} from \"./todolists-reducer\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskApiModel} from \"../api/task-api\";\r\nimport {AppStateType, AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'SET_TASKS':\r\n      return {...state, [action.todolistID]: action.tasks.map(t => ({...t, taskItemStatus: 'idle'}))}\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.id)}\r\n    case 'ADD-TASK': {\r\n      const copyState = {...state}\r\n      let tasks = {...state}[action.task.todoListId]\r\n      const newBLLTypeTask: TaskBLLType = {...action.task, taskItemStatus: 'idle'}\r\n      copyState[action.task.todoListId] = [newBLLTypeTask, ...tasks]\r\n      return copyState;\r\n    }\r\n    case \"UPDATE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n          ...t,\r\n          ...action.changesForApiModel\r\n        } : t)\r\n      }\r\n    case \"CHANGE-TASK-ITEM-STATUS\":\r\n      return {\r\n        ...state,\r\n        [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n          ...t,\r\n          taskItemStatus: action.taskItemStatus\r\n        } : t)\r\n      }\r\n    case \"ADD-TODOLIST\":\r\n      return {...state, [action.todolist.id]: []}\r\n    case \"REMOVE_TODOLIST\":\r\n      const copyTasks = {...state}\r\n      delete copyTasks[action.id]\r\n      return (copyTasks)\r\n    //также с помощью Рест-оператора\r\n    //const {[action.id]:[], ... rest}={...tasks}\r\n    //return rest\r\n    case \"SET_TODOLISTS\":\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    case 'CLEAR-STATE-DATA':\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//action-creators\r\nexport const removeTaskAC = (todolistID: string, id: string,) => ({type: 'REMOVE-TASK', todolistID, id,} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task,} as const)\r\nexport const updateTaskAC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel) =>\r\n  ({type: 'UPDATE_TASK', taskID, todolistID, changesForApiModel,} as const)\r\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) =>\r\n  ({type: 'SET_TASKS', todolistID, tasks} as const)\r\nexport const changeTaskItemStatus = (todolistID: string, taskID: string, taskItemStatus: RequestStatusType) =>\r\n  ({type: 'CHANGE-TASK-ITEM-STATUS', todolistID, taskID, taskItemStatus} as const)\r\n\r\n//thunk-creators\r\nexport const fetchTasksTC = (todolistID: string): AppThunk => dispatch => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  tasksAPI.getTasks(todolistID)\r\n    .then(resp => {\r\n      dispatch(setTasksAC(todolistID, resp.data.items))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch(err => {\r\n      const error = err as AxiosError\r\n      handleServerNetworkError(dispatch, error)\r\n    })\r\n}\r\nexport const removeTaskTC = (todolistID: string, taskID: string,): AppThunk => dispatch => {\r\n  dispatch(changeTaskItemStatus(todolistID, taskID, 'loading'))\r\n  dispatch(setAppStatusAC('loading'))\r\n  tasksAPI.deleteTask(todolistID, taskID)\r\n    .then(() => {\r\n      dispatch(removeTaskAC(todolistID, taskID))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      dispatch(changeTaskItemStatus(todolistID, taskID, 'succeeded'))\r\n    })\r\n    .catch(err => {\r\n      const error = err as AxiosError\r\n      handleServerNetworkError(dispatch, error)\r\n    })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    let resp = await tasksAPI.createTask(todolistID, title)\r\n    if (resp.data.resultCode === 0) {\r\n      dispatch(addTaskAC(resp.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(dispatch, resp.data)\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\nexport const updateTaskTC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel): AppThunk =>\r\n  async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n      dispatch(setAppStatusAC('loading'))\r\n      const state = getState();\r\n      const allTasksOfTodo = state.tasks[todolistID];\r\n      const currentTask = allTasksOfTodo.find(t => t.id === taskID)\r\n      if (!currentTask) {\r\n        console.warn('Task not found in state!!??')\r\n        return\r\n      }\r\n\r\n      const apiModel: UpdateTaskApiModel = {\r\n        deadline: currentTask.deadline,\r\n        description: currentTask.description,\r\n        priority: currentTask.priority,\r\n        startDate: currentTask.startDate,\r\n        status: currentTask.status,\r\n        title: currentTask.title,\r\n        ...changesForApiModel\r\n      }\r\n\r\n      let resp = await tasksAPI.updateTask(todolistID, taskID, apiModel);\r\n      if (resp.data.resultCode === 0) {\r\n        dispatch(updateTaskAC(todolistID, taskID, changesForApiModel))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(dispatch, resp.data)\r\n      }\r\n    } catch (err) {\r\n      const error = err as AxiosError\r\n      handleServerNetworkError(dispatch, error)\r\n    }\r\n  }\r\n\r\n//types\r\nexport type TasksStateType = { [key: string]: Array<TaskBLLType> }\r\nexport type TaskBLLType = TaskType & {\r\n  taskItemStatus: RequestStatusType\r\n}\r\nexport type ActionsType =\r\n  ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof RemoveTodolist>\r\n  | ReturnType<typeof AddTodolist>\r\n  | ReturnType<typeof SetTodolists>\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof changeTaskItemStatus>\r\n  | ReturnType<typeof clearStateData>;\r\n\r\nexport type UpdateTaskUIModel = {\r\n  deadline?: string,\r\n  description?: string,\r\n  priority?: TaskPriorities,\r\n  startDate?: string,\r\n  status?: TaskStatuses,\r\n  title?: string,\r\n}","import {AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {todolistAPI, TodoType} from \"../api/todolist-api\";\r\n\r\nconst initialState: Array<TodolistBLLType> = [];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistBLLType> = initialState, action: ActionType): Array<TodolistBLLType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE_TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id)\r\n    case 'ADD-TODOLIST':\r\n      const newTodo = action.todolist;\r\n      const resultTodo: TodolistBLLType = {...newTodo, filter: 'all', entityStatus: 'idle'}\r\n      return [resultTodo, ...state]\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'SET_TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n    case 'CLEAR-STATE-DATA':\r\n      return []\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//action-creators\r\nexport const RemoveTodolist = (id: string) => ({type: 'REMOVE_TODOLIST', id} as const)\r\nexport const AddTodolist = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist,} as const)\r\nexport const ChangeTodolistTitle = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType) =>\r\n  ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const SetTodolists = (todolists: Array<TodoType>) => ({type: 'SET_TODOLISTS', todolists} as const);\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n  type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n  id,\r\n  entityStatus\r\n} as const)\r\nexport const clearStateData = () => ({type: 'CLEAR-STATE-DATA',} as const)\r\n\r\n//thunk-creators\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const resp = await todolistAPI.getTodolists()\r\n    dispatch(SetTodolists(resp.data))\r\n    resp.data.forEach(tl => {\r\n      dispatch(fetchTasksTC(tl.id))\r\n    })\r\n    dispatch(setAppStatusAC('succeeded'))\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\nexport const removeTodolistTC = (id: string): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(changeTodolistEntityStatusAC(id, 'loading'))\r\n    dispatch(setAppStatusAC('loading'))\r\n    await todolistAPI.deleteTodolist(id)\r\n    dispatch(RemoveTodolist(id))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n    dispatch(changeTodolistEntityStatusAC(id, 'succeeded'))\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    let resp = await todolistAPI.createTodolist(title);\r\n    if (resp.data.resultCode === 0) {\r\n      dispatch(AddTodolist(resp.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(dispatch, resp.data)\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\nexport const updateTodolistTitleTC = (title: string, id: string): AppThunk => async dispatch => {\r\n  try {\r\n    dispatch(setAppStatusAC('loading'))\r\n    let resp = await todolistAPI.updateTodolistTitle(title, id)\r\n    if (resp.data.resultCode === 0) {\r\n      dispatch(ChangeTodolistTitle(id, title))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(dispatch, resp.data)\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError\r\n    handleServerNetworkError(dispatch, error)\r\n  }\r\n}\r\n\r\n//types\r\nexport type TodolistBLLType = TodoType & {\r\n  filter: FilterType\r\n  entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type ActionType =\r\n  ReturnType<typeof RemoveTodolist>\r\n  | ReturnType<typeof AddTodolist>\r\n  | ReturnType<typeof ChangeTodolistTitle>\r\n  | ReturnType<typeof ChangeTodolistFilter>\r\n  | ReturnType<typeof SetTodolists>\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\n  | ReturnType<typeof clearStateData>;","import {applyMiddleware, combineReducers, legacy_createStore as createStore} from \"redux\";\r\nimport {ActionType, todolistsReducer} from \"./todolists-reducer\";\r\nimport {ActionsType, tasksReducer} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer, AppStatusActionType} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer, LoggedInActionType} from \"./auth-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector  //таким образом можно типизировать входящий тип данных в useSelector\r\n//и далее по приложению пользоваться useAppSelector\r\n\r\n//types\r\ntype ReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\ntype AppActionsType = ActionType | ActionsType | AppStatusActionType | LoggedInActionType;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {Slide} from \"@mui/material\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nfunction TransitionDown(props: any,) {\r\n  return (\r\n    <Slide direction=\"down\" children={props}/>\r\n  )\r\n}\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n  const dispatch = useDispatch()\r\n  const error = useAppSelector<string | null>(state => state.app.error)\r\n  const open = error !== null\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={10000} onClose={handleClose} TransitionComponent={TransitionDown}>\r\n      <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useFormik,} from \"formik\";\r\nimport {loginTC} from \"../../store/auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../../common/types/types\";\r\n\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const isLoggedIn = useAppSelector<boolean>(({login}) => login.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: values => {\r\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {}; //Partial говорит о том что мы применяем здесь элементы типа LoginParams, а не отдельный тип\r\n      if (!values.email) {\r\n        errors.email = '😎 E-mail required!';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = '😎 Invalid email address';\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = '😎 Enter your password!';\r\n      } else if (values.password.length > 10 || values.password.length < 4) {\r\n        errors.password = '😎 must be more than 4 characters but less than 10';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n      formik.resetForm();\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    isLoggedIn && navigate('/')\r\n  }, [isLoggedIn, navigate])\r\n\r\n  return <Grid container justifyContent={'center'}>\r\n    <Grid item justifyContent={'center'}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'} rel=\"noreferrer\"> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n            {formik.touched.email\r\n              && formik.errors.email\r\n              && <div style={{color: 'purple'}}>{formik.errors.email}</div>}\r\n            <TextField type=\"password\" label=\"Password\"\r\n                       margin=\"normal\" {...formik.getFieldProps('password')}/>\r\n            {formik.touched.password\r\n              && formik.errors.password\r\n              && <div style={{color: 'purple'}}>{formik.errors.password}</div>}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                 checked={formik.values.rememberMe}/>}/>\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {green} from \"@mui/material/colors\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\nexport interface AddItemFormType {\r\n  addItem: (title: string) => void\r\n  disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n  const [newTitle, setNewTitle] = useState(\"\")\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const addItem = () => {\r\n    if (newTitle.trim()) {\r\n      props.addItem(newTitle.trim());\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setNewTitle(\"\")\r\n  }\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTitle(e.currentTarget.value)\r\n    setError(false);\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    }\r\n  }\r\n  return (\r\n    <div style={{textAlign: 'center'}}>\r\n      <TextField\r\n        disabled={props.disabled}\r\n        variant={'outlined'}\r\n        size={'small'}\r\n        label={'enter item title'}\r\n        helperText={error && 'Error! Typing is expected'}\r\n        value={newTitle}\r\n        onChange={changeTitle}\r\n        onKeyUp={onKeyPressAddItem}\r\n        error={error}\r\n      />\r\n      <IconButton\r\n        disabled={props.disabled}\r\n        onClick={addItem} sx={{color: green[500]}}><AddBox/></IconButton>\r\n      {/*<div className='error-message'>{errorMessage}</div>*/}\r\n    </div>\r\n  );\r\n});\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled}: EditableSpanType) => {\r\n\r\n  const [newTitle, setNewTitle] = useState(title)\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n  const changeNewTitle = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n  const onMode = () => setEditMode(true)\r\n  const offMode = () => {\r\n    changeTitle(newTitle)\r\n    setEditMode(false)\r\n  };\r\n  const keyPressedEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      offMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    disabled ? <span onDoubleClick={onMode}>{title}</span> :\r\n      editMode ?\r\n        <TextField value={newTitle}\r\n                   autoFocus\r\n                   onBlur={offMode}\r\n                   onChange={changeNewTitle}\r\n                   onKeyUp={keyPressedEditMode}\r\n        /> :\r\n        <span onDoubleClick={onMode}>{title}</span>\r\n  )\r\n});\r\n\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {removeTaskTC, TaskBLLType, updateTaskTC} from \"../../store/tasks-reducer\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {TaskStatuses} from \"../../api/task-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n  todolistID: string\r\n  taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({todolistID, taskID,}: TaskPropsType) => {\r\n\r\n  const task = useSelector<AppStateType, TaskBLLType>(({tasks}) => tasks[todolistID].filter(({id}) => id === taskID)[0])\r\n  const dispatch = useDispatch();\r\n\r\n  const getClasses = () => task.status === TaskStatuses.Completed ? \"is-done\" : ''\r\n  const itemFontStyles = {fontWeight: 'bold'}\r\n  const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n    dispatch(updateTaskTC(todolistID, taskID, {status}));\r\n  }, [dispatch, todolistID, taskID,]);\r\n  const changeTaskTitle = useCallback(title => {\r\n    dispatch(updateTaskTC(todolistID, taskID, {title}))\r\n  }, [dispatch, todolistID, taskID,]);\r\n  const removeTask = useCallback(() => {\r\n    dispatch(removeTaskTC(todolistID, taskID,));\r\n  }, [dispatch, todolistID, taskID]);\r\n  return (\r\n    <ListItem\r\n      key={taskID}\r\n      className={getClasses()}\r\n      divider\r\n      disableGutters\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'row',\r\n        textAlign: 'left',\r\n      }}>\r\n\r\n      <div style={itemFontStyles}>\r\n        <Checkbox\r\n          disabled={task.taskItemStatus === 'loading'}\r\n          size={'small'}\r\n          color={'primary'}\r\n          onChange={changeStatus}\r\n          checked={task.status === TaskStatuses.Completed}\r\n          style={{marginRight: '15px'}}\r\n        />\r\n        {task.status === TaskStatuses.Completed\r\n          ? <span>{task.title}</span>\r\n          : <EditableSpan disabled={task.taskItemStatus === 'loading'}\r\n                          title={task.title}\r\n                          changeTitle={changeTaskTitle}/>}\r\n      </div>\r\n      <IconButton onClick={removeTask} disabled={task.taskItemStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n});\r\n\r\n\r\n","import React, {useCallback, useMemo} from \"react\";\r\nimport {AddItemForm} from \"../../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, Typography} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../store/store\";\r\nimport {addTaskTC} from \"../../../store/tasks-reducer\";\r\nimport {\r\n    ChangeTodolistFilter,\r\n    FilterType,\r\n    removeTodolistTC,\r\n    TodolistBLLType,\r\n    updateTodolistTitleTC\r\n} from \"../../../store/todolists-reducer\";\r\nimport {Task} from \"../../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/task-api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist10 = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const todolist = useSelector<AppStateType, TodolistBLLType>(state => state.todolists.filter(tl => tl.id === props.todolistID)[0])\r\n    const tasks = useSelector<AppStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n\r\n    const tasksForRender = (filter: FilterType, tasks: Array<TaskType>) => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            case \"active\":\r\n                return tasks.filter(t => t.status !== TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const tasksJSX = useMemo(() => tasksForRender(todolist.filter, tasks)\r\n        .map(t => <Task\r\n            key={t.id}\r\n            todolistID={props.todolistID}\r\n            taskID={t.id}/>), [props.todolistID, tasks, todolist.filter]);\r\n\r\n    const addTaskTDL = useCallback((newTaskTitle: string) => dispatch(addTaskTC(props.todolistID, newTaskTitle)), [dispatch, props.todolistID]);\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(title, props.todolistID,));\r\n    }, [dispatch, props.todolistID,]);\r\n    const removeTodolist = useCallback(() => dispatch(removeTodolistTC(props.todolistID)), [dispatch, props.todolistID]);\r\n\r\n    const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"all\")), [dispatch, props.todolistID]);\r\n    const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"active\")), [dispatch, props.todolistID]);\r\n    const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"completed\")), [dispatch, props.todolistID]);\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            height: '100%',\r\n            wordBreak: 'break-all', alignItems: 'center'\r\n        }}>\r\n            <Typography\r\n                variant={'h5'}\r\n                align={'center'}\r\n                style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTaskTDL} disabled={todolist.entityStatus === 'loading'}/>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={'small'}>\r\n                    <Button\r\n                        color={todolist.filter === \"all\" ? 'secondary' : \"primary\"}\r\n                        onClick={onAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"active\" ? 'secondary' : \"primary\"}\r\n                        onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"completed\" ? 'secondary' : \"primary\"}\r\n                        onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import {useDispatch} from \"react-redux\";\r\nimport React, {useCallback, useEffect, useMemo} from \"react\";\r\nimport {createTodolistTC, fetchTodolistsTC, TodolistBLLType} from \"../../store/todolists-reducer\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {Todolist10} from \"./Todolist10/Todolist#10\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodosList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const isLoggedIn = useAppSelector<boolean>(({login}) => login.isLoggedIn)\r\n  const todolists = useAppSelector<Array<TodolistBLLType>>(({todolists}) => todolists) //нужен только возвращаемый тип\r\n\r\n  const addTodolist = useCallback((newTodoTitle: string) => {\r\n    dispatch(createTodolistTC(newTodoTitle))\r\n  }, [dispatch]);\r\n\r\n  const todolistForRender = useMemo(() => todolists.map(({id}) => {\r\n\r\n    return (\r\n      <Grid item\r\n            key={id}>\r\n        <Paper elevation={20}\r\n               style={{padding: '15px', minWidth: '300px', maxWidth: '300px', minHeight: '100px'}}>\r\n          < Todolist10\r\n            key={id}\r\n            todolistID={id}\r\n          />\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }), [todolists]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      navigate('/login')\r\n    } else {\r\n      dispatch(fetchTodolistsTC())\r\n    }\r\n  }, [isLoggedIn, dispatch, navigate])\r\n\r\n  return <>\r\n    <Grid container justifyContent={'center'} style={{padding: '15px'}}>\r\n      <Grid item>\r\n        <AddItemForm addItem={addTodolist} disabled={false}/>\r\n      </Grid>\r\n    </Grid>\r\n    <Grid container spacing={5} justifyContent={'center'}>\r\n      {todolistForRender}\r\n    </Grid>\r\n  </>\r\n}","import React from 'react';\r\n\r\nexport const PageNotFound = (): JSX.Element => {\r\n  return (\r\n    <article>\r\n      <h1>ERROR 404</h1>\r\n      <h4 style={{textAlign: 'justify'}}>Ошибка 404 или Not Found («не найдено») — стандартный код ответа HTTP о том,\r\n        что клиент\r\n        был в состоянии общаться с сервером, но сервер не может найти данные согласно запросу.\r\n        Ошибку 404 не следует путать с ошибкой «Сервер не найден» или иными ошибками,\r\n        указывающими на ограничение доступа к серверу. Ошибка 404 означает, что запрашиваемый\r\n        ресурс может быть доступен в будущем, что однако не гарантирует наличие прежнего\r\n        содержания.\r\n        Пользователи наиболее часто сталкиваются с ошибкой 404 при посещении так называемых\r\n        «битых» или «мёртвых ссылок», что делает, таким образом, ошибку 404 одной из наиболее\r\n        узнаваемых ошибок в сети Интернет</h4>\r\n    </article>\r\n  );\r\n};\r\n","import React, {useEffect} from 'react';\nimport '../styles/App.css';\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {useAppSelector} from \"./store/store\";\nimport {Menu,} from \"@mui/icons-material\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {initializeApp, RequestStatusType} from \"./store/app-reducer\";\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\nimport {Navigate, Route, Routes} from 'react-router-dom'\nimport {Login} from \"./components/Login/Login\";\nimport {TodosList} from \"./components/TodosList/TodosList\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutTC} from \"./store/auth-reducer\";\nimport {PageNotFound} from \"./components/PageNotFound/PageNotFound\";\n\n//C-R-U-D\nfunction AppWithRedux() {\n\n  const dispatch = useDispatch();\n  const appStatuses = useAppSelector<RequestStatusType>(({app}) => app.status)\n  const isLoggedIn = useAppSelector<boolean>(({login}) => login.isLoggedIn)\n  const isInitialized = useAppSelector<boolean>(({app}) => app.isInitialized)\n\n  useEffect(() => {\n    dispatch(initializeApp())\n  }, [dispatch])\n\n  if (!isInitialized) {\n    return <div\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n      <CircularProgress/>\n    </div>\n  }\n\n  //UI:\n  return (\n    <div className=\"App\">\n      <ErrorSnackbar/>\n      <AppBar position={'static'}>\n        <Toolbar style={{justifyContent: 'space-between'}}>\n          <IconButton edge='start' color='inherit' aria-label='menu'>\n            <Menu/>\n          </IconButton>\n          <Typography variant='h6'>\n            Todolists\n          </Typography>\n          {isLoggedIn && <Button onClick={() => {\n            dispatch(logoutTC())\n          }} color='inherit' variant={'outlined'}>Logout</Button>}\n\n        </Toolbar>\n      </AppBar>\n      {appStatuses === 'loading' && < LinearProgress color=\"secondary\"/>}\n      <Container fixed>\n        <Routes>\n          <Route path='/' element={<TodosList/>}/>\n          <Route path='/login' element={<Login/>}/>\n          <Route path='/404' element={<PageNotFound/>}/>\n          <Route path='*' element={<Navigate to='/404'/>}/>\n        </Routes>\n      </Container>\n    </div>\n  )\n}\n\nexport default AppWithRedux;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./app/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}