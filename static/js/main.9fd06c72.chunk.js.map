{"version":3,"sources":["common/types/types.ts","reportWebVitals.ts","app/api/config/config.ts","app/api/auth-api.ts","app/store/reducers/app-reducer.ts","common/utils/error-utils.ts","app/api/task-api.ts","common/utils/app-async-thunk.ts","app/store/reducers/auth-reducer.ts","app/api/todolist-api.ts","app/store/reducers/todolists-reducer.ts","app/store/reducers/tasks-reducer.ts","app/store/store.ts","common/hooks/useActions.ts","app/store/selectors/app.selectors.ts","app/components/ErrorSnackbar/ErrorSnackbar.tsx","app/store/selectors/auth.selectors.ts","app/components/Login/Login.tsx","app/components/PageNotFound/PageNotFound.tsx","app/components/AddItemForm/AddItemForm.tsx","app/store/selectors/task.selectors.ts","app/store/selectors/todolist.selectors.ts","app/components/EditableSpan/EditableSpan.tsx","app/components/Task/Task.tsx","app/components/TodosList/Todolist10/Todolist#10.tsx","app/components/TodosList/TodosList.tsx","app/AppWithRedux.tsx","index.tsx"],"names":["ResultCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","process","authAPI","loginParams","post","get","delete","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppStatus","state","action","payload","setAppError","setAppInitialized","appReducer","reducer","appActions","actions","TaskStatuses","TaskPriorities","handleServerNetworkError","dispatch","err","isAxiosError","message","handleServerAppError","data","showError","messages","createAppAsyncThunk","createAsyncThunk","withTypes","login","arg","thunkAPI","a","rejectWithValue","resp","resultCode","OK","isLoggedIn","fieldsErrors","length","errorUtils","logout","_","authActions","clearStateData","initializeApp","extraReducers","builder","addCase","fulfilled","authReducer","authThunks","tasksAPI","todolistId","title","todolistID","taskID","id","model","put","todolistAPI","fetchTodolists","forEach","tl","tasksThunks","fetchTasks","todolists","removeTodolist","todosActions","changeTodolistEntityStatus","entityStatus","createTodolist","todolist","item","updateTodolistTitle","changeTodolistFilter","index","findIndex","filter","map","splice","unshift","todolistsReducer","todosThunks","tasks","items","addTask","task","updateTask","getState","allTasksOfTodo","currentTask","find","apiModel","deadline","description","priority","startDate","changesForApiModel","removeTask","tasksActions","changeTaskItemStatus","taskItemStatus","t","todoListId","tasksReducer","rootReducers","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","useAppDispatch","useDispatch","window","useActions","useMemo","bindActionCreators","Alert","React","props","ref","elevation","variant","ErrorSnackbar","appSelectors","open","handleClose","event","reason","Snackbar","autoHideDuration","onClose","Slide","direction","severity","sx","width","Login","navigate","useNavigate","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","formikHelpers","unwrap","catch","field","setFieldError","useEffect","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","checked","Button","disabled","Object","keys","PageNotFound","textAlign","AddItemForm","memo","useState","newTitle","setNewTitle","setError","addItem","trim","size","helperText","value","onChange","e","currentTarget","onKeyUp","key","IconButton","onClick","green","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onMode","offMode","onDoubleClick","autoFocus","onBlur","Task","removeTaskThunk","changeStatus","useCallback","Completed","New","changeTaskTitle","ListItem","className","divider","disableGutters","display","flexDirection","fontWeight","marginRight","Delete","Todolist10","tasksJSX","tasksForRender","addTaskTDL","newTaskTitle","changeTodoTitle","removeTodo","changeFilterHandler","height","wordBreak","alignItems","Typography","align","ButtonGroup","TodosList","todolistSelectors","taskSelectors","addTodolist","newTodoTitle","todolistForRender","Paper","padding","minWidth","maxWidth","minHeight","spacing","AppWithRedux","appStatus","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","to","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fd06c72.chunk.js","sourcesContent":["export type LoginParamsType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha?: string,\r\n}\r\n\r\nexport enum ResultCode {\r\n  OK,\r\n  ERROR = 10\r\n}\r\n\r\nexport type TodoType = {\r\n  addedDate: string\r\n  id: string\r\n  order: number\r\n  title: string\r\n}\r\nexport type BaseResponseType<T = {}> = {\r\n  resultCode: number\r\n  messages: string[],\r\n  data: T\r\n  fieldsErrors: FieldError[]\r\n}\r\n\r\ntype FieldError = {\r\n  field: string\r\n  error: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nconst API_KEY: string = process.env.REACT_APP_TODOLIST_KEY || ''\r\n\r\nexport const instance = axios.create(\r\n  {\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n      'API-KEY': API_KEY\r\n    }\r\n  }\r\n)","import {instance} from \"app/api/config/config\";\r\nimport {BaseResponseType, LoginParamsType} from \"common/types/types\";\r\n\r\nexport const authAPI = {\r\n  login: (loginParams: LoginParamsType) => {\r\n    return instance.post<BaseResponseType<{ userId: number }>>('/auth/login', loginParams);\r\n  },\r\n  me: () => {\r\n    return instance.get<BaseResponseType>('/auth/me',)\r\n  },\r\n  logout: () => {\r\n    return instance.delete<BaseResponseType>('/auth/login')\r\n  }\r\n}\r\n\r\n","import {createSlice, PayloadAction, Reducer} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null,\r\n  isInitialized: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setAppStatus: (state: LinearProgressStateType, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n      state.status = action.payload.status\r\n    },\r\n    setAppError: (state: LinearProgressStateType, action: PayloadAction<{ error: string | null }>) => {\r\n      state.error = action.payload.error\r\n    },\r\n    setAppInitialized: (state: LinearProgressStateType, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n      state.isInitialized = action.payload.isInitialized\r\n    }\r\n  }\r\n})\r\n\r\nexport const appReducer: Reducer<LinearProgressStateType, AppStatusActionType> = slice.reducer\r\n\r\nexport const appActions = slice.actions\r\n\r\n//types\r\nexport type LinearProgressStateType = typeof initialState;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppStatusActionType =\r\n  PayloadAction<{ status: RequestStatusType }>\r\n  | PayloadAction<{ error: string | null }>\r\n  | PayloadAction<{ isInitialized: boolean }>","import {BaseTasksRespType} from \"app/api/task-api\";\r\nimport {BaseResponseType} from \"common/types/types\";\r\nimport {appActions, AppStatusActionType} from \"app/store/reducers/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n/**\r\n Handles server network errors.\r\n @param {Dispatch<AppStatusActionType>} dispatch - The dispatch function from Redux.\r\n @param {unknown} err - The error object.\r\n */\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppStatusActionType>, err: unknown) => {\r\n  const error = err as AxiosError<{ error: string }> | Error\r\n  if (axios.isAxiosError(error)) {\r\n    dispatch(appActions.setAppError({error: error.message ? error.message : 'SOME ERROR OCCURRED'}))\r\n  } else {\r\n    dispatch(appActions.setAppError({error: `Native error: ${error.message}`}))\r\n  }\r\n  dispatch(appActions.setAppStatus({status: 'failed'}))\r\n}\r\n\r\n\r\n/**\r\n Handles server application errors.\r\n @template T - The type of the response data.\r\n @template D - The type of the tasks response data.\r\n @param {Dispatch<AppStatusActionType>} dispatch - The dispatch function from Redux.\r\n @param {BaseResponseType<T> | BaseTasksRespType<D>} data - The response data object.\r\n @param {boolean} [showError=true] - Flag indicating whether to show the error or not.\r\n */\r\nexport const handleServerAppError = <T, D>(\r\n  dispatch: Dispatch<AppStatusActionType>, data: BaseResponseType<T> | BaseTasksRespType<D>,\r\n  showError: boolean = true\r\n) => {\r\n  showError && dispatch(appActions.setAppError({error: !!data.messages ? data.messages[0] : 'SOME ERROR OCCURRED'}));\r\n  dispatch(appActions.setAppStatus({status: 'failed'}))\r\n}","import {instance} from \"app/api/config/config\";\r\nimport {UpdateTaskUIModel} from \"app/store/reducers/tasks-reducer\";\r\n\r\n//api\r\nexport const tasksAPI = {\r\n  getTasks: (todolistId: string) => {\r\n    return instance.get<GetTaskResponseType>(`/todo-lists/${todolistId}/tasks`,);\r\n  },\r\n  createTask: (arg: AddTask) => {\r\n    return instance.post<BaseTasksRespType>(`/todo-lists/${arg.todolistId}/tasks`, {title: arg.title});\r\n  },\r\n  deleteTask: (arg: RemoveTask) => {\r\n    return instance.delete<BaseTasksRespType<{}>>(`/todo-lists/${arg.todolistID}/tasks/${arg.taskID}`);\r\n  },\r\n  updateTask: (todolistId: string, id: string, model: UpdateTaskApiModel) => {\r\n    return instance.put<BaseTasksRespType>(`/todo-lists/${todolistId}/tasks/${id}`, model);\r\n  },\r\n}\r\n\r\n//types\r\nexport interface AddTask {\r\n  todolistId: string,\r\n  title: string\r\n}\r\n\r\nexport interface UpdateTask {\r\n  todolistID: string,\r\n  taskID: string,\r\n  changesForApiModel: UpdateTaskUIModel\r\n}\r\n\r\nexport interface RemoveTask {\r\n  todolistID: string,\r\n  taskID: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New,\r\n  InProgress,\r\n  Completed,\r\n  Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low,\r\n  Middle,\r\n  Hi,\r\n  Urgently,\r\n  Later\r\n}\r\n\r\nexport type TaskType = {\r\n  addedDate: string,\r\n  deadline: string\r\n  description: string\r\n  id: string\r\n  order: number\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  status: TaskStatuses\r\n  title: string\r\n  todoListId: string\r\n}\r\ntype GetTaskResponseType = {\r\n  error: string | null\r\n  items: TaskType[]\r\n  totalCount: number\r\n}\r\nexport type UpdateTaskApiModel = {\r\n  deadline: string,\r\n  description: string,\r\n  priority: TaskPriorities,\r\n  startDate: string,\r\n  status: TaskStatuses,\r\n  title: string,\r\n}\r\nexport type BaseTasksRespType<D = { item: TaskType }> = {\r\n  resultCode: number\r\n  messages: string[]\r\n  data: D\r\n  fieldsErrors?: string[]\r\n}\r\n\r\n","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppStateType, AppThunkDispatch} from \"app/store/store\";\r\nimport {BaseResponseType} from \"common/types/types\";\r\n\r\n\r\n/**\r\n * A utility function that enhances the functionality of `createAsyncThunk` from Redux Toolkit.\r\n * It allows you to specify additional types for the `state`, `dispatch`, and `rejectValue` parameters.\r\n *\r\n * @template Payload - The type of the payload parameter in the async thunk action.\r\n * @template ThunkApiConfig - The type of the thunkApi configuration object.\r\n * @template AppStateType - The type of your application state.\r\n * @template AppThunkDispatch - The type of the dispatch function in your thunks.\r\n * @template BaseResponseType - The base response type that can be used in case of rejection (optional).\r\n *\r\n * @param {string} typePrefix - A string prefix for the generated action types.\r\n * @param {(payload: Payload, thunkAPI: ThunkApiConfig) => Promise<any>} payloadCreator - The function that creates the promise.\r\n *\r\n * @returns {AsyncThunk<Payload, ThunkApiConfig, { state: AppStateType, dispatch: AppThunkDispatch, rejectValue: BaseResponseType | null }>} The async thunk action creator.\r\n */\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n  state: AppStateType,\r\n  dispatch: AppThunkDispatch,\r\n  rejectValue: BaseResponseType | null\r\n}>()","import {createAsyncThunk, createSlice, PayloadAction, Reducer} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"app/api/auth-api\";\r\nimport {appActions} from \"app/store/reducers/app-reducer\";\r\nimport {LoginParamsType, ResultCode} from \"common/types/types\";\r\nimport {createAppAsyncThunk, errorUtils} from 'common/utils'\r\n\r\nconst login = createAppAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType>('auth/login', async (arg, thunkAPI) => {\r\n  const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n  try {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const resp = await authAPI.login(arg)\r\n    if (resp.data.resultCode === ResultCode.OK) {\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {isLoggedIn: true}\r\n    } else {\r\n      const showError = !resp.data.fieldsErrors.length\r\n      errorUtils.handleServerAppError(dispatch, resp.data, showError)\r\n      return rejectWithValue(resp.data)\r\n    }\r\n  }\r\n  catch (error) {\r\n    errorUtils.handleServerNetworkError(dispatch, error)\r\n    return rejectWithValue(null)\r\n  }\r\n})\r\n\r\nconst logout = createAsyncThunk<{ isLoggedIn: boolean }, void>('auth/logout', async (_, thunkAPI) => {\r\n  const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n  try {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const resp = await authAPI.logout()\r\n    if (resp.data.resultCode === ResultCode.OK) {\r\n      dispatch(authActions.clearStateData())\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {isLoggedIn: false}\r\n    } else {\r\n      errorUtils.handleServerAppError(dispatch, resp.data)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n  catch (error) {\r\n    errorUtils.handleServerNetworkError(dispatch, error)\r\n    return rejectWithValue(null)\r\n  }\r\n})\r\n\r\nconst initializeApp = createAsyncThunk<{ isLoggedIn: boolean }, void>('app/initialize', async (_, thunkAPI) => {\r\n  const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n  try {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const resp = await authAPI.me()\r\n    if (resp.data.resultCode === ResultCode.OK) {\r\n      return {isLoggedIn: true}\r\n    } else {\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n  catch (error) {\r\n    errorUtils.handleServerNetworkError(dispatch, error)\r\n    return rejectWithValue(null)\r\n  }\r\n  finally {\r\n    dispatch(appActions.setAppInitialized({isInitialized: true}))\r\n    dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n  }\r\n})\r\n\r\nconst initialState: AuthStateType = {\r\n  isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    clearStateData: () => initialState\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(login.fulfilled, (state, action) => {\r\n      state.isLoggedIn = action.payload.isLoggedIn\r\n    })\r\n    builder.addCase(logout.fulfilled, (state, action) => {\r\n      state.isLoggedIn = action.payload.isLoggedIn\r\n    })\r\n    builder.addCase(initializeApp.fulfilled, (state, action) => {\r\n      state.isLoggedIn = action.payload.isLoggedIn\r\n    })\r\n  }\r\n})\r\n\r\nexport const authReducer: Reducer<AuthStateType, LoggedInActionType> = slice.reducer\r\n\r\nexport const authActions = slice.actions\r\n\r\nexport const authThunks = {login, logout, initializeApp}\r\n\r\n//types\r\nexport type AuthStateType = {\r\n  isLoggedIn: boolean\r\n}\r\nexport type LoggedInActionType = PayloadAction<{ isLoggedIn: boolean }> | ReturnType<typeof authActions.clearStateData>","import {instance} from \"app/api/config/config\";\r\nimport {BaseResponseType, TodoType} from \"common/types/types\";\r\n\r\nexport const todolistAPI = {\r\n  getTodolists: () => {\r\n    return instance.get<Array<TodoType>>('/todo-lists/');\r\n  },\r\n  createTodolist: (title: string) => {\r\n    return instance.post<BaseResponseType<{ item: TodoType }>>('/todo-lists/', {title});\r\n  },\r\n  deleteTodolist: (id: string) => {\r\n    return instance.delete<BaseResponseType>(`/todo-lists/${id}`);\r\n  },\r\n  updateTodolistTitle: (arg: UpdateTodoTitle) => {\r\n    return instance.put<BaseResponseType>(`/todo-lists/${arg.id}`, {title: arg.title});\r\n  },\r\n}\r\n\r\nexport interface UpdateTodoTitle {\r\n  id: string,\r\n  title: string\r\n}","import {createSlice, PayloadAction, Reducer} from \"@reduxjs/toolkit\";\r\nimport {todolistAPI, UpdateTodoTitle} from \"app/api/todolist-api\";\r\nimport {appActions, RequestStatusType} from \"app/store/reducers/app-reducer\";\r\nimport {authActions} from \"app/store/reducers/auth-reducer\";\r\nimport {tasksThunks} from \"app/store/reducers/tasks-reducer\";\r\nimport {ResultCode, TodoType} from \"common/types/types\";\r\nimport {createAppAsyncThunk, errorUtils} from 'common/utils'\r\n\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodoType[] }, void>('TODOS/FETCH', async (arg, thunkAPI) => {\r\n  const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n  try {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const resp = await todolistAPI.getTodolists()\r\n    resp.data.forEach(tl => {\r\n      dispatch(tasksThunks.fetchTasks(tl.id))\r\n    })\r\n    dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n    return {todolists: resp.data}\r\n  }\r\n  catch (error) {\r\n    errorUtils.handleServerNetworkError(dispatch, error)\r\n    return rejectWithValue(null)\r\n  }\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ id: string }, string>(\r\n  'TODOS/removeTodolist', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    try {\r\n      dispatch(todosActions.changeTodolistEntityStatus({id: arg, entityStatus: 'loading'}))\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const resp = await todolistAPI.deleteTodolist(arg)\r\n      if (resp.data.resultCode === ResultCode.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {id: arg}\r\n      } else {\r\n        errorUtils.handleServerAppError(dispatch, resp.data)\r\n        return rejectWithValue(null)\r\n      }\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst createTodolist = createAppAsyncThunk<{ todolist: TodoType }, string>(\r\n  'TODOS/createTodolist', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const resp = await todolistAPI.createTodolist(arg);\r\n      if (resp.data.resultCode === ResultCode.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {todolist: resp.data.data.item}\r\n      } else {\r\n        errorUtils.handleServerAppError(dispatch, resp.data)\r\n        return rejectWithValue(null)\r\n      }\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst updateTodolistTitle = createAppAsyncThunk<UpdateTodoTitle, UpdateTodoTitle>(\r\n  'TODOS/updateTodolistTitle', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const resp = await todolistAPI.updateTodolistTitle(arg)\r\n      if (resp.data.resultCode === ResultCode.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return arg\r\n      } else {\r\n        errorUtils.handleServerAppError(dispatch, resp.data)\r\n        return rejectWithValue(null)\r\n      }\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst initialState: TodolistBLLType[] = [];\r\n\r\nconst slice = createSlice({\r\n  name: 'TODOLIST',\r\n  initialState,\r\n  reducers: {\r\n    changeTodolistFilter: (state: TodolistBLLType[], action: PayloadAction<{ id: string, filter: FilterType }>) => {\r\n      const index = state.findIndex(({id}) => id === action.payload.id)\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    changeTodolistEntityStatus: (\r\n      state: TodolistBLLType[],\r\n      action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>\r\n    ) => {\r\n      const index = state.findIndex(({id}) => id === action.payload.id)\r\n      state[index].entityStatus = action.payload.entityStatus\r\n    },\r\n  },\r\n  extraReducers: builder =>\r\n    builder\r\n      .addCase(fetchTodolists.fulfilled, (state, action) =>\r\n        action.payload.todolists.map(tl => ({\r\n          ...tl,\r\n          filter: 'all' as FilterType,\r\n          entityStatus: 'idle' as RequestStatusType\r\n        })))\r\n      .addCase(removeTodolist.fulfilled, (state, action) => {\r\n        const index = state.findIndex(({id}) => id === action.payload.id)\r\n        if (index !== -1) state.splice(index, 1)\r\n      })\r\n      .addCase(createTodolist.fulfilled, (state, action) => {\r\n        state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n      })\r\n      .addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n        const index = state.findIndex(({id}) => id === action.payload.id)\r\n        state[index].title = action.payload.title\r\n      })\r\n      .addCase(authActions.clearStateData, () => initialState)\r\n})\r\n\r\n\r\nexport const todolistsReducer: Reducer<TodolistBLLType[], ActionType> = slice.reducer\r\n\r\nexport const todosActions = slice.actions\r\n\r\nexport const todosThunks = {fetchTodolists, removeTodolist, createTodolist, updateTodolistTitle}\r\n\r\n//types\r\nexport type TodolistBLLType = TodoType & {\r\n  filter: FilterType\r\n  entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type ActionType =\r\n  PayloadAction<{ id: string }>\r\n  | PayloadAction<{ todolist: TodoType }>\r\n  | PayloadAction<{ id: string, title: string }>\r\n  | PayloadAction<{ id: string, filter: FilterType }>\r\n  | PayloadAction<{ todolists: TodoType[] }>\r\n  | PayloadAction<{ id: string, entityStatus: RequestStatusType }>\r\n  | ReturnType<typeof authActions.clearStateData>","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {\r\n  AddTask,\r\n  RemoveTask,\r\n  TaskPriorities,\r\n  tasksAPI,\r\n  TaskStatuses,\r\n  TaskType,\r\n  UpdateTask,\r\n  UpdateTaskApiModel\r\n} from \"app/api/task-api\";\r\nimport {appActions, RequestStatusType} from \"app/store/reducers/app-reducer\";\r\nimport {authActions} from \"app/store/reducers/auth-reducer\";\r\nimport {todosThunks} from \"app/store/reducers/todolists-reducer\";\r\nimport {ResultCode, TodoType} from 'common/types/types'\r\nimport {createAppAsyncThunk, errorUtils} from 'common/utils'\r\n\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ todolistID: string, tasks: TaskType[] }, string>(\r\n  'TASK/fetchTasks', async (todolistID, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const resp = await tasksAPI.getTasks(todolistID)\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {todolistID, tasks: resp.data.items}\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, AddTask>(\r\n  'TASK/addTask', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const resp = await tasksAPI.createTask(arg)\r\n      if (resp.data.resultCode === ResultCode.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {task: resp.data.data.item}\r\n      } else {\r\n        errorUtils.handleServerAppError(dispatch, resp.data)\r\n        return rejectWithValue(null)\r\n      }\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTask, UpdateTask>(\r\n  'TASK/updateTask',\r\n  async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n\r\n      const state = getState()\r\n      const allTasksOfTodo = state.tasks[arg.todolistID]\r\n      const currentTask = allTasksOfTodo.find(({id}) => id === arg.taskID)\r\n\r\n      if (!currentTask) {\r\n        dispatch(appActions.setAppError({error: 'Task not found in state!'}))\r\n        return rejectWithValue(null)\r\n      }\r\n\r\n      const apiModel: UpdateTaskApiModel = {\r\n        deadline: currentTask.deadline,\r\n        description: currentTask.description,\r\n        priority: currentTask.priority,\r\n        startDate: currentTask.startDate,\r\n        status: currentTask.status,\r\n        title: currentTask.title,\r\n        ...arg.changesForApiModel\r\n      }\r\n\r\n      let resp = await tasksAPI.updateTask(arg.todolistID, arg.taskID, apiModel);\r\n\r\n      if (resp.data.resultCode === ResultCode.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return arg\r\n      } else {\r\n        errorUtils.handleServerAppError(dispatch, resp.data)\r\n        return rejectWithValue(null)\r\n      }\r\n    }\r\n    catch (error) {\r\n      errorUtils.handleServerNetworkError(dispatch, error)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\nconst removeTask = createAppAsyncThunk<RemoveTask, RemoveTask>('TASK/removeTask', async (arg, thunkAPI) => {\r\n  const {dispatch, rejectWithValue} = thunkAPI\r\n  try {\r\n    dispatch(\r\n      tasksActions.changeTaskItemStatus({todolistID: arg.todolistID, taskID: arg.taskID, taskItemStatus: 'loading'}))\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const resp = await tasksAPI.deleteTask(arg)\r\n    if (resp.data.resultCode === ResultCode.OK) {\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return arg\r\n    } else {\r\n      errorUtils.handleServerAppError(dispatch, resp.data)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n  catch (error) {\r\n    errorUtils.handleServerNetworkError(dispatch, error)\r\n    return rejectWithValue(null)\r\n  }\r\n})\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nconst slice = createSlice({\r\n  name: 'TASK',\r\n  initialState,\r\n  reducers: {\r\n    changeTaskItemStatus: (\r\n      state: TasksStateType,\r\n      action: PayloadAction<{ todolistID: string, taskID: string, taskItemStatus: RequestStatusType }>\r\n    ) => {\r\n      state[action.payload.todolistID].find(t => t.id === action.payload.taskID ? {\r\n        ...t,\r\n        taskItemStatus: action.payload.taskItemStatus\r\n      } : t)\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(fetchTasks.fulfilled, (state, action) => {\r\n        state[action.payload.todolistID] = action.payload.tasks.map(t => ({\r\n          ...t,\r\n          taskItemStatus: 'idle' as RequestStatusType\r\n        }))\r\n      })\r\n      .addCase(addTask.fulfilled, (state, action) => {\r\n        state[action.payload.task.todoListId].unshift({...action.payload.task, taskItemStatus: 'idle'})\r\n      })\r\n      .addCase(updateTask.fulfilled, (state, action) => {\r\n        const tasks = state[action.payload.todolistID]\r\n        const index = tasks.findIndex(({id}) => id === action.payload.taskID)\r\n        if (index > -1) {\r\n          tasks[index] = {...tasks[index], ...action.payload.changesForApiModel}\r\n        }\r\n      })\r\n      .addCase(removeTask.fulfilled, (state, action) => {\r\n        const index = state[action.payload.todolistID].findIndex(({id}) => id === action.payload.taskID)\r\n        if (index > -1) {\r\n          state[action.payload.todolistID].splice(index, 1)\r\n        }\r\n      })\r\n      .addCase(todosThunks.createTodolist.fulfilled, (state, action) => {\r\n        state[action.payload.todolist.id] = []\r\n      })\r\n      .addCase(todosThunks.removeTodolist.fulfilled, (state, action) => {\r\n        delete state[action.payload.id]\r\n      })\r\n      .addCase(todosThunks.fetchTodolists.fulfilled, (state, action) => {\r\n        action.payload.todolists.forEach(({id}) => {\r\n          state[id] = []\r\n        })\r\n      })\r\n      .addCase(authActions.clearStateData, () => initialState);\r\n  },\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const tasksActions = slice.actions\r\n\r\nexport const tasksThunks = {fetchTasks, addTask, updateTask, removeTask}\r\n\r\n//types\r\nexport type TasksStateType = Record<string, TaskBLLType[]>\r\nexport type TaskBLLType = TaskType & {\r\n  taskItemStatus: RequestStatusType\r\n}\r\nexport type ActionsType =\r\n  PayloadAction<{ todolistID: string, id: string }>\r\n  | PayloadAction<{ task: TaskType }>\r\n  | PayloadAction<{ todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel }>\r\n  | PayloadAction<{ id: string }>\r\n  | PayloadAction<{ todolist: TodoType }>\r\n  | PayloadAction<{ todolists: TodoType[] }>\r\n  | PayloadAction<{ todolistID: string, tasks: TaskType[] }>\r\n  | PayloadAction<{ todolistID: string, taskID: string, taskItemStatus: RequestStatusType }>\r\n  | ReturnType<typeof authActions.clearStateData>\r\n\r\nexport type UpdateTaskUIModel = {\r\n  deadline?: string,\r\n  description?: string,\r\n  priority?: TaskPriorities,\r\n  startDate?: string,\r\n  status?: TaskStatuses,\r\n  title?: string,\r\n}","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer, AppStatusActionType} from \"app/store/reducers/app-reducer\";\r\nimport {authReducer, LoggedInActionType} from \"app/store/reducers/auth-reducer\";\r\nimport {ActionsType, tasksReducer} from \"app/store/reducers/tasks-reducer\";\r\nimport {ActionType, todolistsReducer} from \"app/store/reducers/todolists-reducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {combineReducers} from \"redux\";\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  login: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducers,\r\n    middleware: getDefaultMiddleware =>\r\n      getDefaultMiddleware().prepend([thunk])\r\n  }\r\n);\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector  //таким образом можно типизировать входящий тип данных в useSelector\r\n//и далее по приложению пользоваться useAppSelector\r\n\r\nexport const useAppDispatch: () => AppThunkDispatch = useDispatch\r\n\r\n//types\r\nexport type AppThunkDispatch = ThunkDispatch<AppStateType, unknown, AppActionsType>\r\ntype ReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\ntype AppActionsType = ActionType | ActionsType | AppStatusActionType | LoggedInActionType;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ActionCreator, ActionCreatorsMapObject, AsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {useAppDispatch} from \"app/store/store\";\r\nimport {useMemo} from \"react\";\r\nimport {bindActionCreators} from \"redux\";\r\n\r\n/**\r\n * Hook that binds Redux action creators to the dispatch function, allowing them to be used within functional components.\r\n * @template Actions - The type of the action creators object.\r\n * @param {Actions} actions - The object containing Redux action creators.\r\n * @returns {BoundActions<Actions>} The bound action creators.\r\n */\r\nexport const useActions = <Actions extends ActionCreatorsMapObject = ActionCreatorsMapObject>(\r\n  actions: Actions\r\n): BoundActions<Actions> => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return useMemo(() => bindActionCreators(actions, dispatch), [actions, dispatch])\r\n}\r\n\r\n// Types\r\ntype BoundActions<Actions extends ActionCreatorsMapObject> = {\r\n  [key in keyof Actions]: Actions[key] extends AsyncThunk<any, any, any>\r\n    ? BoundAsyncThunk<Actions[key]>\r\n    : Actions[key]\r\n}\r\n\r\ntype BoundAsyncThunk<Action extends ActionCreator<any>> = (\r\n  ...args: Parameters<Action>\r\n) => ReturnType<ReturnType<Action>>\r\n\r\n","import {AppStateType} from \"app/store/store\";\r\n\r\nexport const status = ({app}: AppStateType) => app.status\r\nexport const error = ({app}: AppStateType) => app.error\r\nexport const isInitialized = ({app}: AppStateType) => app.isInitialized","import {Slide} from \"@mui/material\";\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport {appActions} from \"app/store/reducers/app-reducer\";\r\nimport {useAppSelector} from \"app/store/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as React from 'react';\r\nimport * as appSelectors from \"./../../store/selectors/app.selectors\"\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n  const dispatch = useDispatch()\r\n  const error = useAppSelector<string | null>(appSelectors.error)\r\n  const open = error !== null\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(appActions.setAppError({error: null}))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={10000} onClose={handleClose}>\r\n      <Slide direction=\"down\">\r\n        <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n          {error}\r\n        </Alert>\r\n      </Slide>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import {AppStateType} from \"app/store/store\";\r\n\r\nexport const isLoggedIn = ({login}: AppStateType) => login.isLoggedIn","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {authThunks} from \"app/store/reducers/auth-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"app/store/store\";\r\nimport {BaseResponseType, LoginParamsType} from \"common/types/types\";\r\nimport {FormikHelpers, useFormik,} from \"formik\";\r\nimport React, {useEffect} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport * as authSelectors from \"./../../store/selectors/auth.selectors\"\r\n\r\n\r\nexport const Login = () => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const isLoggedIn = useAppSelector<boolean>(authSelectors.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: values => {\r\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {}; //Partial говорит о том что мы применяем здесь элементы типа LoginParams, а не отдельный тип\r\n      if (!values.email) {\r\n        errors.email = '😎 E-mail required!';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = '😎 Invalid email address';\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = '😎 Enter your password!';\r\n      } else if (values.password.length > 10 || values.password.length < 4) {\r\n        errors.password = '😎 must be more than 4 characters but less than 10';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values: LoginParamsType, formikHelpers: FormikHelpers<LoginParamsType>) => {\r\n      dispatch(authThunks.login(values))\r\n        .unwrap()\r\n        .catch((reason: BaseResponseType) => {\r\n          const {fieldsErrors} = reason\r\n          !!fieldsErrors && fieldsErrors.map(\r\n            ({field, error}) => formikHelpers.setFieldError(field, error))\r\n        })\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    isLoggedIn && navigate('/')\r\n  }, [isLoggedIn, navigate])\r\n\r\n  return <Grid container justifyContent={'center'}>\r\n    <Grid item justifyContent={'center'}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'} rel=\"noreferrer\"> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n            {formik.touched.email\r\n              && formik.errors.email\r\n              && <div style={{color: 'fuchsia'}}>{formik.errors.email}</div>}\r\n            <TextField type=\"password\" label=\"Password\"\r\n                       margin=\"normal\" {...formik.getFieldProps('password')}/>\r\n            {formik.touched.password\r\n              && formik.errors.password\r\n              && <div style={{color: 'fuchsia'}}>{formik.errors.password}</div>}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                 checked={formik.values.rememberMe}/>}/>\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}\r\n                    disabled={!!Object.keys(formik.errors).length}>\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const PageNotFound = (): JSX.Element => {\r\n  return (\r\n    <article>\r\n      <h1>ERROR 404</h1>\r\n      <h4 style={{textAlign: 'justify'}}>Ошибка 404 или Not Found («не найдено») — стандартный код ответа HTTP о том,\r\n        что клиент\r\n        был в состоянии общаться с сервером, но сервер не может найти данные согласно запросу.\r\n        Ошибку 404 не следует путать с ошибкой «Сервер не найден» или иными ошибками,\r\n        указывающими на ограничение доступа к серверу. Ошибка 404 означает, что запрашиваемый\r\n        ресурс может быть доступен в будущем, что однако не гарантирует наличие прежнего\r\n        содержания.\r\n        Пользователи наиболее часто сталкиваются с ошибкой 404 при посещении так называемых\r\n        «битых» или «мёртвых ссылок», что делает, таким образом, ошибку 404 одной из наиболее\r\n        узнаваемых ошибок в сети Интернет</h4>\r\n    </article>\r\n  );\r\n};\r\n","import {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {green} from \"@mui/material/colors\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nexport interface AddItemFormType {\r\n  addItem: (title: string) => void\r\n  disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n  const [newTitle, setNewTitle] = useState(\"\")\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const addItem = () => {\r\n    if (newTitle.trim()) {\r\n      props.addItem(newTitle.trim());\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setNewTitle(\"\")\r\n  }\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTitle(e.currentTarget.value)\r\n    setError(false);\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    }\r\n  }\r\n  return (\r\n    <div style={{textAlign: 'center'}}>\r\n      <TextField\r\n        disabled={props.disabled}\r\n        variant={'outlined'}\r\n        size={'small'}\r\n        label={'enter item title'}\r\n        helperText={error && 'Error! Typing is expected'}\r\n        value={newTitle}\r\n        onChange={changeTitle}\r\n        onKeyUp={onKeyPressAddItem}\r\n        error={error}\r\n      />\r\n      <IconButton\r\n        disabled={props.disabled}\r\n        onClick={addItem} sx={{color: green[500]}}><AddBox/></IconButton>\r\n      {/*<div className='error-message'>{errorMessage}</div>*/}\r\n    </div>\r\n  );\r\n});\r\n\r\n","import {AppStateType} from \"app/store/store\";\r\n\r\nexport const tasks = ({tasks}: AppStateType) => tasks\r\n\r\n\r\n","import {AppStateType} from \"app/store/store\";\r\n\r\nexport const todolists = ({todolists}: AppStateType) => todolists\r\n\r\n\r\n","import {TextField} from \"@mui/material\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled}: EditableSpanType) => {\r\n\r\n  const [newTitle, setNewTitle] = useState(title)\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n  const changeNewTitle = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n  const onMode = () => setEditMode(true)\r\n  const offMode = () => {\r\n    changeTitle(newTitle)\r\n    setEditMode(false)\r\n  };\r\n  const keyPressedEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      offMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    disabled ? <span onDoubleClick={onMode}>{title}</span> :\r\n      editMode ?\r\n        <TextField value={newTitle}\r\n                   autoFocus\r\n                   onBlur={offMode}\r\n                   onChange={changeNewTitle}\r\n                   onKeyUp={keyPressedEditMode}\r\n        /> :\r\n        <span onDoubleClick={onMode}>{title}</span>\r\n  )\r\n});\r\n\r\n\r\n","import {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {TaskStatuses} from \"app/api/task-api\";\r\nimport {TaskBLLType, tasksThunks} from \"app/store/reducers/tasks-reducer\";\r\nimport {useAppSelector} from \"app/store/store\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport React, {ChangeEvent, memo, useCallback} from 'react';\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n  todolistID: string\r\n  taskID: string\r\n}\r\n\r\nexport const Task = memo(({todolistID, taskID}: TaskPropsType) => {\r\n\r\n  const task = useAppSelector<TaskBLLType>(({tasks}) => tasks[todolistID].filter(({id}) => id === taskID)[0])\r\n  const {removeTask: removeTaskThunk, updateTask} = useActions(tasksThunks)\r\n\r\n  const getClasses = () => task.status === TaskStatuses.Completed ? \"is-done\" : ''\r\n  const itemFontStyles = {fontWeight: 'bold'}\r\n  const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n    updateTask({todolistID, taskID, changesForApiModel: {status}});\r\n  }, [updateTask, todolistID, taskID,]);\r\n  const changeTaskTitle = useCallback(title => {\r\n    updateTask({todolistID, taskID, changesForApiModel: {title}})\r\n  }, [updateTask, todolistID, taskID,]);\r\n  const removeTask = useCallback(() => {\r\n    removeTaskThunk({todolistID, taskID});\r\n  }, [removeTaskThunk, todolistID, taskID]);\r\n  return (\r\n    <ListItem\r\n      key={taskID}\r\n      className={getClasses()}\r\n      divider\r\n      disableGutters\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'row',\r\n        textAlign: 'left',\r\n      }}>\r\n\r\n      <div style={itemFontStyles}>\r\n        <Checkbox\r\n          disabled={task.taskItemStatus === 'loading'}\r\n          size={'small'}\r\n          color={'primary'}\r\n          onChange={changeStatus}\r\n          checked={task.status === TaskStatuses.Completed}\r\n          style={{marginRight: '15px'}}\r\n        />\r\n        {task.status === TaskStatuses.Completed\r\n          ? <span>{task.title}</span>\r\n          : <EditableSpan disabled={task.taskItemStatus === 'loading'}\r\n                          title={task.title}\r\n                          changeTitle={changeTaskTitle}/>}\r\n      </div>\r\n      <IconButton onClick={removeTask} disabled={task.taskItemStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n});\r\n\r\n\r\n","import {Delete} from \"@mui/icons-material\";\r\nimport {Button, ButtonGroup, IconButton, Typography} from \"@mui/material\";\r\nimport {PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TaskStatuses, TaskType} from \"app/api/task-api\";\r\nimport {tasksThunks} from \"app/store/reducers/tasks-reducer\";\r\nimport {FilterType, TodolistBLLType, todosActions, todosThunks} from \"app/store/reducers/todolists-reducer\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport React, {useCallback, useMemo} from \"react\";\r\nimport {AddItemForm} from \"../../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {Task} from \"../../Task/Task\";\r\n\r\ntype PropsType = {\r\n  todolist: TodolistBLLType\r\n  tasks: TaskType[]\r\n}\r\n\r\nexport const Todolist10 = React.memo(({todolist, tasks}: PropsType) => {\r\n\r\n  const {addTask} = useActions(tasksThunks)\r\n  const {updateTodolistTitle, removeTodolist} = useActions(todosThunks)\r\n  const {changeTodolistFilter} = useActions(todosActions)\r\n\r\n  const tasksForRender = (filter: FilterType, tasks: TaskType[]) => {\r\n    switch (filter) {\r\n      case \"completed\":\r\n        return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n      case \"active\":\r\n        return tasks.filter(t => t.status !== TaskStatuses.Completed)\r\n      default:\r\n        return tasks\r\n    }\r\n  }\r\n  const tasksJSX = useMemo(() => tasksForRender(todolist.filter, tasks)\r\n    .map(t => <Task\r\n      key={t.id}\r\n      todolistID={t.todoListId}\r\n      taskID={t.id}/>), [tasks, todolist.filter]);\r\n\r\n  const addTaskTDL = useCallback(\r\n    (newTaskTitle: string) => addTask({todolistId: todolist.id, title: newTaskTitle}),\r\n    [addTask, todolist.id]\r\n  );\r\n  const changeTodoTitle = useCallback((title: string) =>\r\n    updateTodolistTitle({id: todolist.id, title}), [updateTodolistTitle, todolist.id,]);\r\n\r\n  const removeTodo = useCallback(() => removeTodolist(todolist.id), [removeTodolist, todolist.id])\r\n\r\n  const changeFilterHandler = (filter: FilterType) =>\r\n    (): PayloadAction<{ id: string; filter: FilterType }> => changeTodolistFilter({id: todolist.id, filter})\r\n\r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'space-between',\r\n      height: '100%',\r\n      wordBreak: 'break-all', alignItems: 'center'\r\n    }}>\r\n      <Typography\r\n        variant={'h5'}\r\n        align={'center'}\r\n        style={{fontWeight: 'bold'}}>\r\n        <EditableSpan title={todolist.title} changeTitle={changeTodoTitle}\r\n                      disabled={todolist.entityStatus === 'loading'}/>\r\n        <IconButton onClick={removeTodo} disabled={todolist.entityStatus === 'loading'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </Typography>\r\n      <AddItemForm addItem={addTaskTDL} disabled={todolist.entityStatus === 'loading'}/>\r\n      <ul>\r\n        {tasksJSX}\r\n      </ul>\r\n      <div>\r\n        <ButtonGroup\r\n          variant={\"contained\"}\r\n          size={'small'}>\r\n          <Button\r\n            color={todolist.filter === \"all\" ? 'secondary' : \"primary\"}\r\n            onClick={changeFilterHandler(\"all\")}>All\r\n          </Button>\r\n          <Button\r\n            color={todolist.filter === \"active\" ? 'secondary' : \"primary\"}\r\n            onClick={changeFilterHandler(\"active\")}>Active\r\n          </Button>\r\n          <Button\r\n            color={todolist.filter === \"completed\" ? 'secondary' : \"primary\"}\r\n            onClick={changeFilterHandler(\"completed\")}>Completed\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n    </div>\r\n  )\r\n});","import {Grid, Paper} from \"@mui/material\";\r\nimport {TasksStateType} from \"app/store/reducers/tasks-reducer\";\r\nimport {TodolistBLLType, todosThunks} from \"app/store/reducers/todolists-reducer\";\r\nimport {useAppSelector} from \"app/store/store\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport React, {useCallback, useEffect, useMemo} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport * as authSelectors from \"./../../store/selectors/auth.selectors\"\r\nimport * as taskSelectors from \"./../../store/selectors/task.selectors\"\r\nimport * as todolistSelectors from \"./../../store/selectors/todolist.selectors\"\r\nimport {Todolist10} from \"./Todolist10/Todolist#10\";\r\n\r\nexport const TodosList = () => {\r\n  const {createTodolist,fetchTodolists} = useActions(todosThunks)\r\n  const navigate = useNavigate();\r\n  const isLoggedIn = useAppSelector<boolean>(authSelectors.isLoggedIn)\r\n  const todolists = useAppSelector<TodolistBLLType[]>(todolistSelectors.todolists)\r\n  const tasks = useAppSelector<TasksStateType>(taskSelectors.tasks)\r\n\r\n  const addTodolist = useCallback((newTodoTitle: string) => createTodolist(newTodoTitle), [createTodolist]);\r\n\r\n  const todolistForRender = useMemo(() => todolists.map(tl => {\r\n    return (\r\n      <Grid item\r\n            key={tl.id}>\r\n        <Paper elevation={20}\r\n               style={{padding: '15px', minWidth: '300px', maxWidth: '300px', minHeight: '100px'}}>\r\n          < Todolist10\r\n            key={tl.id}\r\n            todolist={tl}\r\n            tasks={tasks[tl.id]}\r\n          />\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  }), [todolists, tasks]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      navigate('/login')\r\n    } else {\r\n      fetchTodolists()\r\n    }\r\n  }, [isLoggedIn, fetchTodolists, navigate])\r\n\r\n  return <>\r\n    <Grid container justifyContent={'center'} style={{padding: '15px'}}>\r\n      <Grid item>\r\n        <AddItemForm addItem={addTodolist} disabled={false}/>\r\n      </Grid>\r\n    </Grid>\r\n    <Grid container spacing={5} justifyContent={'center'}>\r\n      {todolistForRender}\r\n    </Grid>\r\n  </>\r\n}","import {Menu,} from \"@mui/icons-material\";\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {RequestStatusType} from \"app/store/reducers/app-reducer\";\r\nimport {authThunks} from \"app/store/reducers/auth-reducer\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport React, {useEffect} from 'react';\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport '../styles/App.css';\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {PageNotFound} from \"./components/PageNotFound/PageNotFound\";\r\nimport {TodosList} from \"./components/TodosList/TodosList\";\r\nimport * as appSelectors from \"./store/selectors/app.selectors\"\r\nimport * as authSelectors from \"./store/selectors/auth.selectors\"\r\nimport {useAppSelector} from \"./store/store\";\r\n\r\n//C-R-U-D\r\nfunction AppWithRedux() {\r\n\r\n  const {initializeApp, logout} = useActions(authThunks);\r\n  const appStatus = useAppSelector<RequestStatusType>(appSelectors.status)\r\n  const isLoggedIn = useAppSelector<boolean>(authSelectors.isLoggedIn)\r\n  const isInitialized = useAppSelector<boolean>(appSelectors.isInitialized)\r\n\r\n  useEffect(() => {\r\n    initializeApp()\r\n  }, [initializeApp])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  //UI:\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position={'static'}>\r\n        <Toolbar style={{justifyContent: 'space-between'}}>\r\n\r\n          <IconButton edge='start' color='inherit' aria-label='menu'>\r\n            <Menu/>\r\n          </IconButton>\r\n\r\n          <Typography variant='h6'>\r\n            Todolists\r\n          </Typography>\r\n\r\n          {isLoggedIn &&\r\n              <Button onClick={() => logout()} color='inherit' variant={'outlined'}>\r\n                  Logout\r\n              </Button>}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {appStatus === 'loading' && < LinearProgress color=\"secondary\"/>}\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path='/' element={<TodosList/>}/>\r\n          <Route path='/login' element={<Login/>}/>\r\n          <Route path='/404' element={<PageNotFound/>}/>\r\n          <Route path='*' element={<Navigate to='/404'/>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./app/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}