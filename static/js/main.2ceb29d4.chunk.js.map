{"version":3,"sources":["api/task-api.ts","reportWebVitals.ts","api/todolist-api.ts","utils/error-utils.ts","store/auth-reducer.ts","store/app-reducer.ts","store/tasks-reducer.ts","store/todolists-reducer.ts","store/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist#10.tsx","components/Todolist/TodosList.tsx","components/AppWithRedux/AppWithRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","settings","withCredentials","headers","instance","axios","create","baseURL","authInstance","todolistAPI","get","title","post","id","delete","put","authAPI","loginParams","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","data","messages","initialState","isLoggedIn","setIsLoggedIn","value","type","status","error","isInitialized","tasksAPI","todolistId","model","updateTaskAC","todolistID","taskID","changesForApiModel","changeTaskItemStatus","taskItemStatus","updateTaskTC","getState","a","state","allTasksOfTodo","tasks","currentTask","find","t","console","warn","apiModel","deadline","description","priority","startDate","resp","resultCode","RemoveTodolist","ChangeTodolistTitle","ChangeTodolistFilter","filter","changeTodolistEntityStatusAC","entityStatus","clearStateData","rootReducers","combineReducers","todolists","action","tl","newTodo","todolist","resultTodo","map","copyState","task","todoListId","newBLLTypeTask","copyTasks","forEach","app","login","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","TransitionDown","props","Slide","direction","Alert","React","ref","elevation","variant","ErrorSnackbar","useDispatch","open","handleClose","event","reason","Snackbar","autoHideDuration","onClose","TransitionComponent","severity","sx","width","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","useEffect","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","name","onChange","handleChange","Button","AddItemForm","memo","useState","newTitle","setNewTitle","setError","addItem","trim","textAlign","disabled","size","helperText","e","currentTarget","onKeyPress","key","IconButton","onClick","green","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onMode","offMode","onDoubleClick","autoFocus","onBlur","Task","changeStatus","useCallback","checked","Completed","New","changeTaskTitle","removeTask","removeTaskAC","catch","err","removeTaskTC","ListItem","className","divider","disableGutters","display","flexDirection","fontWeight","marginRight","Delete","Todolist10","tasksJSX","useMemo","tasksForRender","addTaskTDL","newTaskTitle","changeTodoTitle","updateTodolistTitleTC","removeTodolist","onAllFilter","onActiveFilter","onCompletedFilter","height","wordBreak","alignItems","Typography","align","ButtonGroup","TodosList","setTasksAC","items","addTodolist","newTodoTitle","todolistForRender","Paper","padding","minWidth","maxWidth","minHeight","spacing","to","AppWithRedux","appStatuses","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","top","CircularProgress","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.2ceb29d4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'b42e249f-81b0-486e-a39f-c56668ce792c'\r\n    }\r\n}\r\nconst instance = axios.create({baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists', ...settings,})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<GetTaskResponseType>(`${todolistId}/tasks`,);\r\n    },\r\n    createTask: (todolistId: string, title: string) => {\r\n        return instance.post<BaseTasksRespType>(`${todolistId}/tasks`, {title});\r\n    },\r\n    deleteTask: (todolistId: string, id: string) => {\r\n        return instance.delete<BaseTasksRespType<{}>>(`${todolistId}/tasks/${id}`);\r\n    },\r\n    updateTask: (todolistId: string, id: string, model: UpdateTaskApiModel) => {\r\n        return instance.put<BaseTasksRespType>(`${todolistId}/tasks/${id}`, model);\r\n    },\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string,\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype GetTaskResponseType = {\r\n    error: string | null\r\n    items: TaskType[]\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskApiModel = {\r\n    deadline: string,\r\n    description: string,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    status: TaskStatuses,\r\n    title: string,\r\n}\r\nexport type BaseTasksRespType<D = { item: TaskType }> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n    fieldsErrors?: string[]\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nexport type TodoType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type BaseResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: T\r\n    fieldsErrors: string[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: boolean,\r\n}\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'b42e249f-81b0-486e-a39f-c56668ce792c'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    ...settings,\r\n})\r\nconst authInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/auth',\r\n    ...settings,\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodolists: () => {\r\n        return instance.get<Array<TodoType>>('');\r\n    },\r\n    createTodolist: (title: string) => {\r\n        return instance.post<BaseResponseType<{ item: TodoType }>>('', {title});\r\n    },\r\n    deleteTodolist: (id: string) => {\r\n        return instance.delete<BaseResponseType>(`${id}`);\r\n    },\r\n    updateTodolistTitle: (title: string, id: string) => {\r\n        return instance.put<BaseResponseType>(`${id}`, {title});\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login: (loginParams: LoginParamsType) => {\r\n        return authInstance.post<BaseResponseType<{ userId: number }>>('login', loginParams);\r\n    },\r\n    me: ()=>{\r\n      return authInstance.get<BaseResponseType>('me',)\r\n    },\r\n    logout: ()=>{\r\n        return authInstance.delete<BaseResponseType>('login')\r\n    }\r\n}","import {AppStatusActionType, setAppErrorAC, setAppStatusAC} from \"../store/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BaseResponseType} from \"../api/todolist-api\";\r\nimport {BaseTasksRespType} from \"../api/task-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppStatusActionType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T,D>(dispatch: Dispatch<AppStatusActionType>, data: BaseResponseType<T>|BaseTasksRespType<D>) => {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {AppThunk} from \"./store\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../api/todolist-api\";\r\nimport {clearStateData} from \"./todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: LoggedInActionType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//action-creator\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n//thunk -creator\r\nexport const loginTC = (loginParams: LoginParamsType): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const resp = await authAPI.login(loginParams)\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\n\r\nexport const logoutTC = ():AppThunk=> async dispatch =>{\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const resp = await authAPI.logout()\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(clearStateData())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type AuthInitialStateType = typeof initialState;\r\nexport type LoggedInActionType = ReturnType<typeof setIsLoggedIn>","import {AppThunk} from \"./store\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: LinearProgressStateType = initialState, action: AppStatusActionType): LinearProgressStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//action-creator\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\n//thunk-creators\r\nexport const initializeApp = (): AppThunk => async dispatch => {\r\n    try {\r\n        const resp = await authAPI.me()\r\n        dispatch(setIsInitializedAC(true));\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LinearProgressStateType = typeof initialState;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppStatusActionType =\r\n    ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>","import {AddTodolist, clearStateData, RemoveTodolist, SetTodolists} from \"./todolists-reducer\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskApiModel} from \"../api/task-api\";\r\nimport {AppStateType, AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TASKS':\r\n            return {...state, [action.todolistID]: action.tasks.map(t => ({...t, taskItemStatus: 'idle'}))}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.id)}\r\n        case 'ADD-TASK': {\r\n            const copyState = {...state}\r\n            let tasks = {...state}[action.task.todoListId]\r\n            const newBLLTypeTask: TaskBLLType = {...action.task, taskItemStatus: 'idle'}\r\n            copyState[action.task.todoListId] = [newBLLTypeTask, ...tasks]\r\n            return copyState;\r\n        }\r\n        case \"UPDATE_TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    ...action.changesForApiModel\r\n                } : t)\r\n            }\r\n        case \"CHANGE-TASK-ITEM-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    taskItemStatus: action.taskItemStatus\r\n                } : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE_TODOLIST\":\r\n            const copyTasks = {...state}\r\n            delete copyTasks[action.id]\r\n            return (copyTasks)\r\n        //также с помощью Рест-оператора\r\n        //const {[action.id]:[], ... rest}={...tasks}\r\n        //return rest\r\n        case \"SET_TODOLISTS\":\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        case 'CLEAR-STATE-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action-creators\r\nexport const removeTaskAC = (todolistID: string, id: string,) => ({type: 'REMOVE-TASK', todolistID, id,} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task,} as const)\r\nexport const updateTaskAC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel) =>\r\n    ({type: 'UPDATE_TASK', taskID, todolistID, changesForApiModel,} as const)\r\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) =>\r\n    ({type: 'SET_TASKS', todolistID, tasks} as const)\r\nexport const changeTaskItemStatus = (todolistID: string, taskID: string, taskItemStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TASK-ITEM-STATUS', todolistID, taskID, taskItemStatus} as const)\r\n\r\n//thunk-creators\r\nexport const fetchTasksTC = (todolistID: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistID)\r\n        .then(resp => {\r\n            dispatch(setTasksAC(todolistID, resp.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistID: string, taskID: string,): AppThunk => dispatch => {\r\n    dispatch(changeTaskItemStatus(todolistID, taskID, 'loading'))\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(todolistID, taskID)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(todolistID, taskID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(changeTaskItemStatus(todolistID, taskID, 'succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let resp = await tasksAPI.createTask(todolistID, title)\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(addTaskAC(resp.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\nexport const updateTaskTC = (todolistID: string, taskID: string, changesForApiModel: UpdateTaskUIModel): AppThunk =>\r\n    async (dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const state = getState();\r\n            const allTasksOfTodo = state.tasks[todolistID];\r\n            const currentTask = allTasksOfTodo.find(t => t.id === taskID)\r\n            if (!currentTask) {\r\n                console.warn('Task not found in state!!??')\r\n                return\r\n            }\r\n\r\n            const apiModel: UpdateTaskApiModel = {\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                status: currentTask.status,\r\n                title: currentTask.title,\r\n                ...changesForApiModel\r\n            }\r\n\r\n            let resp = await tasksAPI.updateTask(todolistID, taskID, apiModel);\r\n            if (resp.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(todolistID, taskID, changesForApiModel))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, resp.data)\r\n            }\r\n        } catch (err) {\r\n            const error = err as AxiosError\r\n            handleServerNetworkError(dispatch, error.message)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type TasksStateType = { [key: string]: Array<TaskBLLType> }\r\nexport type TaskBLLType = TaskType & {\r\n    taskItemStatus: RequestStatusType\r\n}\r\nexport type ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof changeTaskItemStatus>\r\n    | ReturnType<typeof clearStateData>;\r\n\r\nexport type UpdateTaskUIModel = {\r\n    deadline?: string,\r\n    description?: string,\r\n    priority?: TaskPriorities,\r\n    startDate?: string,\r\n    status?: TaskStatuses,\r\n    title?: string,\r\n}","import {todolistAPI, TodoType} from \"../api/todolist-api\";\r\nimport {AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nconst initialState: Array<TodolistBLLType> = [];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistBLLType> = initialState, action: ActionType): Array<TodolistBLLType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodo = action.todolist;\r\n            const resultTodo: TodolistBLLType = {...newTodo, filter: 'all', entityStatus: 'idle'}\r\n            return [resultTodo, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'CLEAR-STATE-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action-creators\r\nexport const RemoveTodolist = (id: string) => ({type: 'REMOVE_TODOLIST', id} as const)\r\nexport const AddTodolist = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist,} as const)\r\nexport const ChangeTodolistTitle = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const ChangeTodolistFilter = (id: string, filter: FilterType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const SetTodolists = (todolists: Array<TodoType>) => ({type: 'SET_TODOLISTS', todolists} as const);\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const clearStateData = () => ({type: 'CLEAR-STATE-DATA',} as const)\r\n\r\n//thunk-creators\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const resp =await todolistAPI.getTodolists()\r\n        dispatch(SetTodolists(resp.data))\r\n        resp.data.forEach(tl=>{\r\n            dispatch(fetchTasksTC(tl.id))\r\n        })\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\nexport const removeTodolistTC = (id: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(changeTodolistEntityStatusAC(id, 'loading'))\r\n        dispatch(setAppStatusAC('loading'))\r\n        await todolistAPI.deleteTodolist(id)\r\n        dispatch(RemoveTodolist(id))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(changeTodolistEntityStatusAC(id, 'succeeded'))\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\nexport const createTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let resp = await todolistAPI.createTodolist(title);\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(AddTodolist(resp.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\nexport const updateTodolistTitleTC = (title: string, id: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let resp = await todolistAPI.updateTodolistTitle(title, id)\r\n        if (resp.data.resultCode === 0) {\r\n            dispatch(ChangeTodolistTitle(id, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch,resp.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(dispatch, error.message)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistBLLType = TodoType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type ActionType =\r\n    ReturnType<typeof RemoveTodolist>\r\n    | ReturnType<typeof AddTodolist>\r\n    | ReturnType<typeof ChangeTodolistTitle>\r\n    | ReturnType<typeof ChangeTodolistFilter>\r\n    | ReturnType<typeof SetTodolists>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearStateData>;","import {applyMiddleware, combineReducers, legacy_createStore as createStore} from \"redux\";\r\nimport {ActionType, todolistsReducer} from \"./todolists-reducer\";\r\nimport {ActionsType, tasksReducer} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer, AppStatusActionType} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer, LoggedInActionType} from \"./auth-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector  //таким образом можно типизировать входящий тип данных в useSelector\r\n//и далее по приложению пользоваться useAppSelector\r\n\r\n//types\r\ntype ReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\ntype AppActionsType = ActionType | ActionsType | AppStatusActionType | LoggedInActionType;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {Slide} from \"@mui/material\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/app-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nfunction TransitionDown(props: any) {\r\n    return <Slide {...props} direction=\"down\"/>;\r\n}\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const open = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={open} autoHideDuration={10000} onClose={handleClose} TransitionComponent={TransitionDown}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useFormik,} from \"formik\";\r\nimport {loginTC} from \"../../store/auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../api/todolist-api\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.login.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: Partial<Omit<LoginParamsType,'captcha'>> = {}; //Partial говорит о том что мы применяем здесь элементы типа LoginParams, а не отдельный тип\r\n            if (!values.email) {\r\n                errors.email = '😎 E-mail required!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = '😎 Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = '😎 Enter your password!';\r\n            } else if (values.password.length > 10 || values.password.length < 4) {\r\n                errors.password = '😎 must be more than 4 characters but less than 10';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    useEffect(()=>{\r\n        isLoggedIn && navigate('/')\r\n    },[isLoggedIn, navigate])\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email\r\n                            && formik.errors.email\r\n                            && <div style={{color: 'purple'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password\r\n                            && formik.errors.password\r\n                            && <div style={{color: 'purple'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>}\r\n                                          name='rememberMe'\r\n                                          onChange={formik.handleChange} value={formik.values.rememberMe}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {green} from \"@mui/material/colors\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\nexport interface AddItemFormType {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const [newTitle, setNewTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        if (newTitle.trim()) {\r\n            props.addItem(newTitle.trim());\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTitle(\"\")\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        setError(false);\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                label={'enter item title'}\r\n                helperText={error && 'Error! Typing is expected'}\r\n                value={newTitle}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                error={error}\r\n            />\r\n            <IconButton\r\n                disabled={props.disabled}\r\n                onClick={addItem} sx={{color: green[500]}}><AddBox/></IconButton>\r\n            {/*<div className='error-message'>{errorMessage}</div>*/}\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, changeTitle, disabled}: EditableSpanType) => {\r\n\r\n    const [newTitle, setNewTitle] = useState(title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const changeNewTitle = (e: ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\r\n    const onMode = () => setEditMode(true)\r\n    const offMode = () => {\r\n        changeTitle(newTitle)\r\n        setEditMode(false)\r\n    };\r\n    const keyPressedEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        disabled ? <span onDoubleClick={onMode}>{title}</span> :\r\n            editMode ?\r\n                <TextField value={newTitle}\r\n                           autoFocus\r\n                           onBlur={offMode}\r\n                           onChange={changeNewTitle}\r\n                           onKeyPress={keyPressedEditMode}\r\n                /> :\r\n                <span onDoubleClick={onMode}>{title}</span>\r\n    )\r\n});\r\n\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {removeTaskTC, TaskBLLType, updateTaskTC} from \"../../store/tasks-reducer\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {TaskStatuses} from \"../../api/task-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    todolistID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({todolistID, taskID,}: TaskPropsType) => {\r\n\r\n    const task = useSelector<AppStateType, TaskBLLType>(state => state.tasks[todolistID].filter(t => t.id === taskID)[0])\r\n    const dispatch = useDispatch();\r\n\r\n    const getClasses = () => task.status === TaskStatuses.Completed ? \"is-done\" : ''\r\n    const itemFontStyles = {fontWeight: 'bold'}\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskTC(todolistID, taskID, {status}));\r\n    }, [dispatch, todolistID, taskID,]);\r\n    const changeTaskTitle = useCallback(title => {\r\n        dispatch(updateTaskTC(todolistID, taskID, {title}))\r\n    }, [dispatch, todolistID, taskID,]);\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(todolistID, taskID,));\r\n    }, [dispatch, todolistID, taskID]);\r\n    return (\r\n        <ListItem\r\n            key={taskID}\r\n            className={getClasses()}\r\n            divider\r\n            disableGutters\r\n            style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                flexDirection: 'row',\r\n                textAlign: 'left',\r\n            }}>\r\n\r\n            <div style={itemFontStyles}>\r\n                <Checkbox\r\n                    disabled={task.taskItemStatus === 'loading'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onChange={changeStatus}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    style={{marginRight: '15px'}}\r\n                />\r\n                {task.status === TaskStatuses.Completed\r\n                    ? <span>{task.title}</span>\r\n                    : <EditableSpan disabled={task.taskItemStatus === 'loading'}\r\n                                    title={task.title}\r\n                                    changeTitle={changeTaskTitle}/>}\r\n            </div>\r\n            <IconButton onClick={removeTask} disabled={task.taskItemStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n\r\n","import React, {useCallback, useMemo} from \"react\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, Typography} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {addTaskTC} from \"../../store/tasks-reducer\";\r\nimport {\r\n    ChangeTodolistFilter,\r\n    FilterType,\r\n    removeTodolistTC,\r\n    TodolistBLLType,\r\n    updateTodolistTitleTC\r\n} from \"../../store/todolists-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/task-api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n}\r\n\r\nexport const Todolist10 = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const todolist = useSelector<AppStateType, TodolistBLLType>(state => state.todolists.filter(tl => tl.id === props.todolistID)[0])\r\n    const tasks = useSelector<AppStateType, Array<TaskType>>(state => state.tasks[props.todolistID])\r\n\r\n    const tasksForRender = (filter: FilterType, tasks: Array<TaskType>) => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            case \"active\":\r\n                return tasks.filter(t => t.status !== TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const tasksJSX = useMemo(() => tasksForRender(todolist.filter, tasks)\r\n        .map(t => <Task\r\n            key={t.id}\r\n            todolistID={props.todolistID}\r\n            taskID={t.id}/>), [props.todolistID, tasks, todolist.filter]);\r\n\r\n    const addTaskTDL = useCallback((newTaskTitle: string) => dispatch(addTaskTC(props.todolistID, newTaskTitle)), [dispatch, props.todolistID]);\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(title, props.todolistID,));\r\n    }, [dispatch, props.todolistID,]);\r\n    const removeTodolist = useCallback(() => dispatch(removeTodolistTC(props.todolistID)), [dispatch, props.todolistID]);\r\n\r\n    const onAllFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"all\")), [dispatch, props.todolistID]);\r\n    const onActiveFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"active\")), [dispatch, props.todolistID]);\r\n    const onCompletedFilter = useCallback(() => dispatch(ChangeTodolistFilter(props.todolistID, \"completed\")), [dispatch, props.todolistID]);\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            height: '100%',\r\n            wordBreak: 'break-all', alignItems: 'center'\r\n        }}>\r\n            <Typography\r\n                variant={'h5'}\r\n                align={'center'}\r\n                style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTaskTDL} disabled={todolist.entityStatus === 'loading'}/>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={\"contained\"}\r\n                    size={'small'}>\r\n                    <Button\r\n                        color={todolist.filter === \"all\" ? 'secondary' : \"primary\"}\r\n                        onClick={onAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"active\" ? 'secondary' : \"primary\"}\r\n                        onClick={onActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={todolist.filter === \"completed\" ? 'secondary' : \"primary\"}\r\n                        onClick={onCompletedFilter}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import {useDispatch} from \"react-redux\";\r\nimport React, {useCallback, useEffect, useMemo} from \"react\";\r\nimport {createTodolistTC, fetchTodolistsTC, TodolistBLLType} from \"../../store/todolists-reducer\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {Todolist10} from \"./Todolist#10\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodosList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.login.isLoggedIn)\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    const todolists = useAppSelector<Array<TodolistBLLType>>(state => state.todolists) //нужен только возвращаемый тип\r\n    const addTodolist = useCallback((newTodoTitle: string) => {\r\n        dispatch(createTodolistTC(newTodoTitle))\r\n    }, [dispatch]);\r\n\r\n    const todolistForRender = useMemo(() => todolists.map(tl => {\r\n\r\n        return (\r\n            <Grid item\r\n                  key={tl.id}>\r\n                <Paper elevation={20}\r\n                       style={{padding: '15px', minWidth: '300px', maxWidth: '300px', minHeight: '100px'}}>\r\n                    < Todolist10\r\n                        key={tl.id}\r\n                        todolistID={tl.id}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    }), [todolists]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container justifyContent={'center'} style={{padding: '15px'}}>\r\n            <Grid item>\r\n                <AddItemForm addItem={addTodolist} disabled={false}/>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container spacing={5} justifyContent={'center'}>\r\n            {todolistForRender}\r\n        </Grid>\r\n    </>\r\n}","import React, {useEffect} from 'react';\nimport '../../App.css';\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {useAppSelector} from \"../../store/store\";\nimport {Menu,} from \"@mui/icons-material\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {initializeApp, RequestStatusType} from \"../../store/app-reducer\";\nimport {ErrorSnackbar} from \"../ErrorSnackbar/ErrorSnackbar\";\nimport {Route, Routes, Navigate} from 'react-router-dom'\nimport {Login} from \"../Login/Login\";\nimport {TodosList} from \"../Todolist/TodosList\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutTC} from \"../../store/auth-reducer\";\n\n//C-R-U-D\nfunction AppWithRedux() {\n\n    const dispatch=useDispatch();\n    const appStatuses = useAppSelector<RequestStatusType>(state => state.app.status)\n    const isLoggedIn = useAppSelector<boolean>(state => state.login.isLoggedIn)\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\n\n    useEffect(()=>{\n        dispatch(initializeApp())\n    },[dispatch])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    //UI:\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position={'static'}>\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant='h6'>\n                        Todolists\n                    </Typography>\n                    {isLoggedIn&& <Button onClick={()=>{dispatch(logoutTC())}} color='inherit' variant={'outlined'}>Logout</Button>}\n\n                </Toolbar>\n            </AppBar>\n            {appStatuses === 'loading' && < LinearProgress color=\"secondary\"/>}\n            <Container fixed>\n                <Routes>\n                    <Route path='/' element={<TodosList/>}/>\n                    <Route path='/login' element={<Login/>}/>\n                    <Route path='/404' element={\n                        <article>\n                            <h1>ERROR 404</h1>\n                            <h4 style={{textAlign: 'justify'}}>Ошибка 404 или Not Found («не найдено») — стандартный код ответа HTTP о том, что клиент\n                                был в состоянии общаться с сервером, но сервер не может найти данные согласно запросу.\n                                Ошибку 404 не следует путать с ошибкой «Сервер не найден» или иными ошибками,\n                                указывающими на ограничение доступа к серверу. Ошибка 404 означает, что запрашиваемый\n                                ресурс может быть доступен в будущем, что однако не гарантирует наличие прежнего\n                                содержания.\n                                Пользователи наиболее часто сталкиваются с ошибкой 404 при посещении так называемых\n                                «битых» или «мёртвых ссылок», что делает, таким образом, ошибку 404 одной из наиболее\n                                узнаваемых ошибок в сети Интернет</h4>\n                        </article>\n                    }/>\n                    <Route path='*' element={<Navigate to='/404'/>}/>\n                </Routes>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./components/AppWithRedux/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter basename={'TODOLIST'}>\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}